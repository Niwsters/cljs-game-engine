{"version":3,"sources":["thi/ng/geom/tetrahedron.cljc"],"mappings":"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","names":["p__15491","vec__15492","cljs.core.nth","thi.ng.geom.tetrahedron/orient-tetra","a","b","c","d","t","dp","thi.ng.math.core/-","thi.ng.math.core/normalize","thi.ng.math.core/dot","thi.ng.geom.utils.ortho_normal","var_args","G__15498","thi.ng.geom.tetrahedron/tetrahedron","js/Error","points","thi.ng.geom.types/Tetrahedron","cljs.core.mapv","thi.ng.geom.vector/vec3","thi.ng.geom.tetrahedron.tetrahedron","cljs.core/PROTOCOL_SENTINEL","_","cljs.core.transduce","p1__15502#","cljs.core.map","G__15525","thi.ng.math.core/abs*","cljs.core.apply","thi.ng.geom.utils/tri-area3","cljs.core/+","thi.ng.geom.core/faces","p","thi.ng.geom.utils/bounding-box","thi.ng.geom.core/vertices","thi.ng.geom.utils/axis-range","thi.ng.geom.utils.bounding_sphere","thi.ng.geom.core/centroid","thi.ng.geom.utils.center","thi.ng.geom.vector/V3","cljs.core.get","o","thi.ng.geom.utils/centroid","p__15531","map__15533","cljs.core/--destructure-map","vec__15534","map__15537","vec__15538","p__15597","map__15598","vec__15599","map__15602","vec__15603","p__15574","map__15575","vec__15576","map__15580","vec__15581","p__15551","map__15552","vec__15553","map__15559","vec__15560","v","pred__15566","expr__15567","cljs.core/=","fexpr__15570","cljs.core/set","s","thi.ng.geom.utils.intersect/intersect-tetrahedra?","cljs.core/sequential?","cljs.core._EQ_","cljs.core/count","thi.ng.xerror.core/type-error!","l","thi.ng.xerror.core.unsupported_BANG_","p__15546","map__15547","dir","thi.ng.geom.core/as-mesh","opts","vec__15542","thi.ng.geom.core/into","or__5043__auto__","thi.ng.geom.basicmesh/basic-mesh","thi.ng.geom.core/point-at","thi.ng.math.core.random","thi.ng.geom.utils/from-barycentric","thi.ng.math.core.normdist_weights","e","classifier","cp","p1__15507#","cljs.core.conj","theta","thi.ng.geom.core/rotate-z","p1__15508#","thi.ng.geom.core/rotate-x","p1__15509#","thi.ng.geom.core/rotate-y","p1__15510#","axis","p1__15511#","thi.ng.geom.core/rotate-around-axis","p1__15512#","thi.ng.math.core/*","thi.ng.geom.utils.scale_size","p1__15513#","thi.ng.math.core/+","m","p1__15514#","thi.ng.geom.core/transform-vector","p__15606","map__15607","vec__15608","map__15615","vec__15616","n","Math/abs","thi.ng.math.core/THIRD"],"sourcesContent":["(ns thi.ng.geom.tetrahedron\n  #?(:cljs (:require-macros [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.utils.intersect :as isec]\n   [thi.ng.geom.vector :as v :refer [vec3]]\n   [thi.ng.geom.triangle :as t]\n   [thi.ng.geom.basicmesh :as bm]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [Tetrahedron]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [PI HALF_PI THIRD SQRT3 *eps*]]\n   #?(:clj [thi.ng.math.macros :as mm]))\n   #?(:clj (:import [thi.ng.geom.types Tetrahedron])))\n\n(defn orient-tetra\n  \"Takes a seq of 4 3D points, returns them as vector in the order so\n  that the last point is on the opposite side of the plane defined by\n  the first three points.\"\n  [[a b c d :as t]]\n  (let [dp (-> d (m/- a) (m/normalize) (m/dot (gu/ortho-normal a b c)))]\n    (if (neg? dp) [a b c d] [a c b d])))\n\n(defn tetrahedron\n  ([points]\n   (Tetrahedron.\n    (orient-tetra (mapv vec3 points))))\n  ([a b c d] (tetrahedron [a b c d])))\n\n(extend-type Tetrahedron\n\n  g/IArea\n  (area\n    [_] (transduce (map #(m/abs* (apply gu/tri-area3 %))) + (g/faces _)))\n\n  ;; TODO use classify-point on all faces to check for containment\n  ;; (must be neg for all)\n\n  g/IClassify\n  (classify-point [_ p] nil) ; TODO\n\n  g/IProximity\n  (closest-point [_ p] nil) ; TODO\n\n  g/IBoundary\n  (contains-point? [_ p] nil) ; TODO\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (g/vertices _)))\n  (width [_] (gu/axis-range 0 (g/vertices _)))\n  (height [_] (gu/axis-range 1 (g/vertices _)))\n  (depth [_] (gu/axis-range 2 (g/vertices _)))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (g/vertices _)))\n\n  g/ICenter\n  (center\n    ([_] (Tetrahedron. (gu/center v/V3 (get _ :points))))\n    ([_ o] (Tetrahedron. (gu/center o (get _ :points)))))\n  (centroid [_] (gu/centroid (get _ :points)))\n\n  g/IFlip\n  (flip\n    [{[a b c d] :points}] (Tetrahedron. [b a c d]))\n\n  g/IVertexAccess\n  (vertices\n    [_] (get _ :points))\n\n  g/IEdgeAccess\n  (edges\n    [{[a b c d] :points}]\n    [[a b] [b c] [c a] [a d] [b d] [c d]])\n\n  g/IFaceAccess\n  (faces\n    ([t _] (g/faces t))\n    ([{[a b c d] :points}]\n     [[[a b c]] [[a d b]] [[b d c]] [[c d a]]]))\n\n  g/IGraph\n  (vertex-neighbors\n    [{[a b c d] :points} v]\n    (condp = v\n      a [c b d]\n      b [a c d]\n      c [b a d]\n      d [a b c]\n      nil))\n  (vertex-valence\n    [_ v] (if ((set (get _ :points)) v) 3 0))\n\n  g/IIntersect\n  (intersect-shape\n    [_ s]\n    (cond\n      (instance? Tetrahedron s)\n      (isec/intersect-tetrahedra?\n       (orient-tetra (g/vertices _)) (orient-tetra (g/vertices s)))\n      (and (sequential? s) (= 4 (count s)))\n      (isec/intersect-tetrahedra? (g/vertices _) (orient-tetra s))\n      :else (err/type-error! \"Tetrahedron\" s)))\n  (intersect-line\n    [_ l] (err/unsupported!))\n  (intersect-ray\n    [_ {p :p dir :dir}] (err/unsupported!))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ opts]\n     (let [[a b c d] (orient-tetra (get _ :points))]\n       (g/into (or (get opts :mesh) (bm/basic-mesh)) (g/faces _)))))\n\n  g/ISample\n  (point-at [_ t] nil) ; TODO\n  (random-point\n    [_] (g/point-at _ (m/random)))\n  (random-point-inside\n    [_] (gu/from-barycentric (g/vertices _) (m/normdist-weights 4)))\n\n  g/ISlice\n  (slice-with\n    ([_ e] nil)\n    ([_ e classifier] nil))\n\n  g/ISubdivide\n  (subdivide\n    [_]\n    (let [cp (gu/centroid (get _ :points))]\n      (map #(tetrahedron (conj % cp)) (g/faces _))))\n\n  g/ITessellate\n  (tessellate\n    [_] (g/faces _))\n\n  g/IRotate\n  (rotate [_ theta] (g/rotate-z _ theta))\n\n  g/IRotate3D\n  (rotate-x\n    [_ theta] (Tetrahedron. (mapv #(g/rotate-x % theta) (get _ :points))))\n  (rotate-y\n    [_ theta] (Tetrahedron. (mapv #(g/rotate-y % theta) (get _ :points))))\n  (rotate-z\n    [_ theta] (Tetrahedron. (mapv #(g/rotate-z % theta) (get _ :points))))\n  (rotate-around-axis\n    [_ axis theta]\n    (Tetrahedron.\n     (mapv #(g/rotate-around-axis % axis theta) (get _ :points))))\n\n  g/IScale\n  (scale\n    [_ s] (Tetrahedron. (mapv #(m/* % s) (get _ :points))))\n  (scale-size\n    [_ s] (Tetrahedron. (gu/scale-size s (get _ :points))))\n\n  g/ITranslate\n  (translate\n    [_ t] (Tetrahedron. (mapv #(m/+ % t) (get _ :points))))\n\n  g/ITransform\n  (transform\n    [_ m] (Tetrahedron. (mapv #(g/transform-vector m %) (get _ :points))))\n\n  ;; http://mathcentral.uregina.ca/QQ/database/QQ.09.03/peter2.html\n\n  g/IVolume\n  (volume\n    [{[a b c d] :points}]\n    (let [n (gu/ortho-normal a b c)]\n      (Math/abs (* (* m/THIRD (gu/tri-area3 a b c)) (- (m/dot n d) (m/dot n a)))))))\n"]}