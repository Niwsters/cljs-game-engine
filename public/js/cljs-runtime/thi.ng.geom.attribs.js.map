{"version":3,"sources":["thi/ng/geom/attribs.cljc"],"mappings":"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","names":["thi.ng.geom.attribs/face-attribs","fattribs","fid","vid","_","cljs.core.nth","thi.ng.geom.attribs/const-face-attribs","thi.ng.geom.attribs/generate-face-attribs","verts","face-id","attribs","opts","cljs.core/seq","cljs.core/reduce-kv","acc","k","f","cljs.core.assoc","p1__15061#","p2__15062#","cljs.core.map_indexed","var_args","G__15073","thi.ng.geom.attribs/supplied-attrib","js/Error","attrib","id","cljs.core.get","tx","G__15083","G__15089","thi.ng.geom.attribs/uv-rect-for-size","w","thi.ng.geom.attribs.uv_rect_for_size","h","x","y","uw","vh","u","v","iu","iv","p1__15087#","cljs.core.mapv","thi.ng.math.core/+","thi.ng.geom.vector.vec2","G__15105","thi.ng.geom.attribs/uv-cube-map-h","thi.ng.geom.attribs.uv_cube_map_h","pow2?","tw","thi.ng.math.core/ceil-pow2","fw","p1__15099#","cljs.core.range","G__15113","thi.ng.geom.attribs/uv-cube-map-v","thi.ng.geom.attribs.uv_cube_map_v","th","fh","p1__15111#","thi.ng.geom.attribs/uv-default-rect","thi.ng.geom.attribs/uv-faces","cljs.core.repeat","p__15116","map__15118","cljs.core/--destructure-map","thi.ng.geom.attribs/uv-tube","du","dv","G__15119","p__15120","map__15121","thi.ng.geom.attribs/uv-flat-disc","theta","r","G__15122","Math/cos","Math/sin","thi.ng.geom.attribs/uv-polygon-disc","res","thi.ng.math.core/norm-range","p1__15124#","thi.ng.math.core/TWO_PI"],"sourcesContent":["(ns thi.ng.geom.attribs\n  #?(:cljs (:require-macros [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.matrix :refer [M44]]\n   [thi.ng.math.core :as m]\n   #?(:clj [thi.ng.math.macros :as mm])))\n\n;; This namespace provides vertex attribute generators and utilities used\n;; by various other geom namespaces to simplify the creation of\n;; attributed meshes.\n;;\n;; This project uses a functional approach for vertex attribute\n;; generation and relies on attribute generator fns accepting these 4\n;; arguments, in order:\n;;\n;; | *Arg*       | *Type*    | *Description*                                            |\n;; |-------------+-----------+----------------------------------------------------------|\n;; | `face-id`   | int       | ID of face currently being generated                     |\n;; | `vertex-id` | int       | ID of vertex in current face (usually 0-3 or 0-4)        |\n;; | `vertex`    | vec2/vec3 | the actual vertex                                        |\n;; | `opts`      | map       | extra data supplied by type to help w/ attrib generation |\n;;\n;; ** Types supporting attribute generation\n;;\n;; Eventually, all shape types provided will support vertex attribute\n;; generation as part of their `g/as-mesh` implementations. At current,\n;; this is only supported by the following implementations, though. Since\n;; UV texture coordinates are one of the most common applications of\n;; vertex attributes, the table also lists which attribute generator\n;; should/could be used for each type.\n;;\n;; *Note:* Vertex attributes are only supported by the following mesh types:\n;;\n;; - `thi.ng.geom.IndexedMesh`\n;; - `thi.ng.geom.gl.GLMesh`\n;; - `thi.ng.geom.gl.IndexedGLMesh`\n;;\n;; | *Type*          | *UV generation examples*                                              |\n;; |-----------------+-----------------------------------------------------------------------|\n;; | AABB            | `(g/as-mesh a {:mesh ... :attribs {:uv (attr/uv-cube-map-v)}})`       |\n;; | Circle          | `(g/as-mesh a {:mesh ... :attribs {:uv attr/uv-flat-disc}})`          |\n;; | Cuboid          | `(g/as-mesh a {:mesh ... :attribs {:uv (attr/uv-cube-map-v)}})`       |\n;; | Polygon2        | `(g/as-mesh a {:mesh ... :attribs {:uv (attr/supplied-attrib :uv)}})` |\n;; | Polyhedron mesh | `(polyhedron-mesh f {:mesh ... :attribs {:uv ...}})`                  |\n;; | PTF             | `(g/as-mesh a {:mesh ... :attribs {:uv attr/uv-tube}})`               |\n;; | Rect2           | `(g/as-mesh a {:mesh ... :attribs {:uv (attr/supplied-attrib :uv)}})` |\n;; | Sphere          | `(g/as-mesh a {:mesh ... :attribs {:uv (attr/supplied-attrib :uv)}})` |\n;;\n;; ** Attribute generation & application\n\n(defn face-attribs\n  \"Vertex attribute generator using given seq of attribs. The seq\n  should contain at least the same number of elements as there are\n  faces to be generated. Each item itself is a vector of attrib\n  values (in vertex order) to be assigned to each vertex. Returns\n  generator fn.\"\n  [fattribs] (fn [fid vid _ _] (-> fattribs (nth fid) (nth vid))))\n\n(defn const-face-attribs\n  \"Similar to face-attribs fn, but for attributes which are constant\n  for all vertices of a single face. Takes a seq of attrib values and\n  returns generator fn.\"\n  [fattribs] (fn [fid _ _ _] (nth fattribs fid)))\n\n(defn generate-face-attribs\n  \"Takes a vector of face vertices, face id, a map of vertex attribute\n  generator fns and an options arg passed to the attribute generator\n  fns. Returns 2-elem vector of [verts vert-attribs]. The generator\n  fns themselves take these 4 args and should return the attribute for\n  a single vertex: face-id, vertex-id, vertex, opts (a map).\"\n  [verts face-id attribs opts]\n  [verts\n   (when (seq attribs)\n     (reduce-kv\n      (fn [acc k f] (assoc acc k (map-indexed #(f face-id % %2 opts) verts)))\n      {} attribs))])\n\n;; ** Attribute generation\n;; *** Generic\n;;\n;; Several types provide useful additional data to attribute generator\n;; functions, which sometimes even is directly usable as attribute\n;; values. E.g. the sphere type's =as-mesh= implementation internally\n;; requires UV coordinates, which then are also supplied to attribute\n;; generators and can directly be harnessed for the actual vertex\n;; attributes.\n;;\n;; In general, if available, this kind of additional data is provided via\n;; a map as the 4th argument to an attribute generator fn. The following\n;; generic helper function can be used to select such a pre-computed\n;; attribute value (and optionally transform it).\n\n(defn supplied-attrib\n  \"Higher order helper, returns attribute generator fn for types which\n  emit pre-computed values as part of their `as-mesh` impl. Takes\n  attrib key and for each vertex looks up value in opts map (which is\n  supplied by supporting types, e.g. sphere). If called via 2 args,\n  the looked up values will also be passed to transformation fn (2nd\n  arg).\"\n  ([attrib] (fn [_ id _ opts] (-> opts (get attrib) (nth id))))\n  ([attrib tx] (fn [_ id _ opts] (-> opts (get attrib) (nth id) tx))))\n\n;; *** UV texture coordinates\n;; **** Cube\n\n(defn uv-rect-for-size\n  ([w] (uv-rect-for-size w w))\n  ([w h] (uv-rect-for-size w w 0.0 0.0 1.0 1.0))\n  ([w h x y uw vh]\n   (let [u  (* 0.5 (/ uw w))\n         v  (* 0.5 (/ vh h))\n         iu (- uw u)\n         iv (- vh v)]\n     (mapv #(m/+ % x y) [(vec2 u v) (vec2 iu v) (vec2 iu iv) (vec2 u iv)]))))\n\n(defn uv-cube-map-h\n  ([h] (uv-cube-map-h h false))\n  ([h pow2?]\n   (let [w  (* h 6)\n         tw (if pow2? (m/ceil-pow2 w) w)\n         fw (/ (/ w tw) 6.0)]\n     (mapv #(uv-rect-for-size h h (* % fw) 0.0 fw 1.0) (range 6)))))\n\n(defn uv-cube-map-v\n  ([h] (uv-cube-map-v h false))\n  ([w pow2?]\n   (let [h  (* w 6)\n         th (if pow2? (m/ceil-pow2 h) h)\n         fh (/ (/ h th) 6.0)]\n     (mapv #(uv-rect-for-size w w 0.0 (* % fh) 1.0 fh) (range 6)))))\n\n(def uv-default-rect [(vec2) (vec2 1.0 0.0) (vec2 1.0) (vec2 0.0 1.0)])\n\n(def uv-faces (face-attribs (repeat uv-default-rect)))\n\n;; **** Tube\n;;\n;; Tube UV mapping is currently only supported by the following implementations:\n;;\n;; - PTF `sweep-mesh`\n\n(defn uv-tube\n  \"Generates tubular UV coordinates, using data provided in\n  options map (:u :v :du :dv keys)\"\n  [_ vid _ {:keys [u v du dv]}]\n  (case (int vid)\n    0 (v/vec2 u v)\n    1 (v/vec2 (+ u du) v)\n    2 (v/vec2 (+ u du) (+ v dv))\n    (v/vec2 u (+ v dv))))\n\n;; **** Disc\n\n(defn uv-flat-disc\n  \"Generates UV coordinates for a circle/trianglefan, using data\n  provided in options map (:theta & :r keys). The first vertex of each\n  triangle is assumed to be in the center of the circle, the other 2\n  vertices are located at the circles perimeter.\"\n  [_ vid _ {:keys [theta r] :as opts}]\n  (case (int vid)\n    0 (vec2 0.5)\n    1 (vec2 (mm/madd (Math/cos theta) r 0.5)\n            (mm/madd (Math/sin theta) r 0.5))\n    (let [theta (+ theta (get opts :delta))]\n      (vec2 (mm/madd (Math/cos theta) r 0.5)\n            (mm/madd (Math/sin theta) r 0.5)))))\n\n(defn uv-polygon-disc\n  \"HOF UV generator for polygons/polyhedras. Takes polygon resolution\n  and computes N UV coords, returns generator fn\"\n  [res]\n  (->> res\n       m/norm-range\n       (mapv #(m/+ (g/as-cartesian (vec2 0.5 (* % m/TWO_PI))) 0.5))\n       repeat\n       face-attribs))\n"]}