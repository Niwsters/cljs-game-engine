{"version":3,"sources":["thi/ng/geom/gl/shaders.cljc"],"mappings":"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","names":["thi.ng.geom.gl.shaders/bool->int","x","thi.ng.geom.gl.shaders/bool->ivec","coll","thi.ng.typedarrays.core/int32","cljs.core.mapv","thi.ng.geom.gl.shaders/uniform-types","cljs.core/float","cljs.core/int","thi.ng.typedarrays.core/float32","thi.ng.geom.gl.shaders/init-shader-uniforms","gl","prog","uniforms","cljs.core/reduce-kv","umap","id","type","vec__17381","cljs.core.nth","vec__17384","loc","cljs.core/name","default","opt","cljs.core/sequential?","setter","u-cast","u-len","cljs.core.assoc","fexpr__17387","fexpr__17388","cljs.core/boolean","thi.ng.typedarrays.core/typed-array?","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","thi.ng.dstruct.streams/IBuffer","thi.ng.dstruct.streams/get-float-buffer","G__17390","G__17392","thi.ng.color.core/int24","cljs.core/deref","cljs.core.subvec","thi.ng.color.core/css","G__17395","thi.ng.geom.gl.shaders/set-uniform","shader","val","temp__5802__auto__","u-spec","cljs.core.get","G__17397","fexpr__17396","cljs.core/fn?","js/console","js/Date","cljs.core.apply","cljs.core/str","cljs.core.interpose","cljs.core/List","thi.ng.geom.gl.shaders/apply-default-uniforms","_","cljs.core/not","d","thi.ng.geom.gl.shaders/init-shader-attribs","attribs","acc","thi.ng.geom.gl.shaders/set-attribute","attrib-spec","map__17401","cljs.core/--destructure-map","buffer","stride","size","normalized?","offset","G__17403","thi.ng.geom.gl.webgl.constants/array-buffer","or__5043__auto__","thi.ng.geom.gl.webgl.constants/float","thi.ng.geom.gl.shaders/disable-attribute","thi.ng.geom.gl.shaders/default-prelude","thi.ng.geom.gl.shaders/compile-glsl-vars","qualifier","cljs.core.map","p__17404","vec__17405","cljs.core/first","thi.ng.geom.gl.shaders/compile-glsl3-attribs","p__17408","vec__17409","p__17412","map__17413","thi.ng.geom.gl.shaders/prepare-shader-sources","vs","fs","varying","prelude","version","gl3?","and__5041__auto__","u-src","a-src","v-src-vs","v-src-fs","src","thi.ng.geom.gl.shaders/parse-and-throw-error","src-lines","cljs.core/vec","clojure.string/split-lines","errors","line","vec__17416","ln","msg","cljs.core/re-find","js/parseInt","cljs.core.filter","cljs.core/identity","clojure.string.join","thi.ng.xerror.core/throw!","thi.ng.geom.gl.shaders/compile-shader","thi.ng.geom.gl.webgl.constants/compile-status","thi.ng.geom.gl.shaders/bind-attrib-locations","program","att","thi.ng.geom.gl.shaders/make-shader-from-spec","spec","map__17421","map__17422","vs-src","fs-src","thi.ng.geom.gl.webgl.constants/vertex-shader","thi.ng.geom.gl.webgl.constants/fragment-shader","G__17423","thi.ng.geom.gl.webgl.constants/link-status","G__17424","cljs.core.merge","p__17425","map__17426","thi.ng.geom.gl.shaders/make-shader-from-dom","thi.ng.geom.gl.utils/get-script-text"],"sourcesContent":["(ns thi.ng.geom.gl.shaders\n  #?(:clj\n     (:import\n      [com.jogamp.opengl GL GL2 GL3 GL4]\n      [com.jogamp.opengl.util.glsl ShaderCode ShaderProgram ShaderUtil]\n      [java.nio Buffer FloatBuffer IntBuffer ShortBuffer])\n     :cljs\n     (:require-macros\n      [cljs-log.core :refer [debug warn]]))\n  (:require\n   [thi.ng.math.core :as m]\n   [thi.ng.geom.core :as g]\n   [thi.ng.dstruct.streams :as streams]\n   [thi.ng.color.core :as col]\n   [thi.ng.xerror.core :as err]\n   [clojure.string :as str]\n   #?@(:clj\n       [[thi.ng.geom.gl.jogl.buffers :as native]\n        [thi.ng.geom.gl.jogl.constants :as glc]\n        [thi.ng.glsl.core :as glsl]]\n       :cljs\n       [[thi.ng.geom.gl.webgl.constants :as glc]\n        [thi.ng.geom.gl.utils :as glu]\n        [thi.ng.glsl.core :as glsl :include-macros true]\n        [thi.ng.typedarrays.core :as ta]])))\n\n;; Shader spec format\n;;\n;; | *Key*       | *Description*                                           |\n;; |-------------+---------------------------------------------------------|\n;; | `:vs`       | Vertex shader source                                    |\n;; | `:fs`       | Fragment shader source                                  |\n;; | `:attribs`  | User attributes                                         |\n;; | `:uniforms` | Shader uniform specification & defaults                 |\n;; | `:varying`  | Shader internal bridge variables                        |\n;; | `:prelude`  | GLSL source code to prepend (e.g. =#define= directives) |\n;; | `:version`  | GLSL version number (generates =#version= directive)    |\n;; | `:state`    | OpenGL state flags to initialize when shader is used    |\n;;\n;; TODO sample shader spec\n\n(defn bool->int [x] (if x 1 0))\n\n(defn bool->ivec\n  [coll] (#?(:clj native/int-buffer :cljs ta/int32) (mapv bool->int coll)))\n\n;; Shader uniforms\n;; Supported types\n\n(def uniform-types\n  #?(:clj  {:float       [#(.glUniform1f ^GL3 % %2 %3) float 1]\n            :int         [#(.glUniform1i ^GL3 % %2 %3) int 1]\n            :vec2        [#(.glUniform2fv ^GL3 % %2 1 ^FloatBuffer %3) native/float-buffer 2]\n            :vec3        [#(.glUniform3fv ^GL3 % %2 1 ^FloatBuffer %3) native/float-buffer 3]\n            :vec4        [#(.glUniform4fv ^GL3 % %2 1 ^FloatBuffer %3) native/float-buffer 4]\n            :ivec2       [#(.glUniform2iv ^GL3 % %2 1 ^IntBuffer %3) native/int-buffer 2]\n            :ivec3       [#(.glUniform3iv ^GL3 % %2 1 ^IntBuffer %3) native/int-buffer 3]\n            :ivec4       [#(.glUniform4iv ^GL3 % %2 1 ^IntBuffer %3) native/int-buffer 4]\n            :bool        [#(.glUniform1i ^GL3 % %2 %3) bool->int 1]\n            :bvec2       [#(.glUniform2iv ^GL3 % %2 1 ^IntBuffer %3) bool->ivec 2]\n            :bvec3       [#(.glUniform3iv ^GL3 % %2 1 ^IntBuffer %3) bool->ivec 3]\n            :bvec4       [#(.glUniform4iv ^GL3 % %2 1 ^IntBuffer %3) bool->ivec 4]\n            :mat2        [#(.glUniformMatrix2fv ^GL3 % %2 1 %3 ^FloatBuffer %4) native/float-buffer 4]\n            :mat3        [#(.glUniformMatrix3fv ^GL3 % %2 1 %3 ^FloatBuffer %4) native/float-buffer 9]\n            :mat4        [#(.glUniformMatrix4fv ^GL3 % %2 1 %3 ^FloatBuffer %4) native/float-buffer 16]\n            :sampler2D   [#(.glUniform1i ^GL3 % %2 %3) int 1]\n            :samplerCube [#(.glUniform1i ^GL3 % %2 %3) int 1]}\n     :cljs {:float       [\"1f\" float]\n            :int         [\"1i\" int]\n            :vec2        [\"2fv\" ta/float32 2]\n            :vec3        [\"3fv\" ta/float32 3]\n            :vec4        [\"4fv\" ta/float32 4]\n            :ivec2       [\"2iv\" ta/int32 2]\n            :ivec3       [\"3iv\" ta/int32 3]\n            :ivec4       [\"4iv\" ta/int32 4]\n            :bool        [\"1i\" int]\n            :bvec2       [\"2iv\" ta/int32 2]\n            :bvec3       [\"3iv\" ta/int32 3]\n            :bvec4       [\"4iv\" ta/int32 4]\n            :mat2        [\"Matrix2fv\" ta/float32 4]\n            :mat3        [\"Matrix3fv\" ta/float32 9]\n            :mat4        [\"Matrix4fv\" ta/float32 16]\n            :sampler2D   [\"1i\" int]\n            :samplerCube [\"1i\" int]}))\n\n;; Uniform setup & handling\n;;\n;; Shader specs define uniforms as a map under the `:uniforms` key. In\n;; this map, each of the shader's uniform names must be stated as keys\n;; and their types as values. Default values can be given by using a\n;; vector of `[type default]`. Default values are only used when a user\n;; doesn't specify a uniform in their model spec. The example below\n;; defines default values for the `:ambient`, `:model` and `:texture`\n;; uniforms:\n;;\n;; ```\n;; :uniforms {:alpha    :float\n;;            :diffuse  :vec3\n;;            :ambient  [:vec3 [0.1 0.1 0.1]]\n;;            :texture  [:sampler2D 0]\n;;            :modelMat [:mat4 M44]\n;;            :viewMat  :mat4\n;;            :projMat  :mat4}\n;; ```\n;;\n;; Special cases:\n;;\n;; - Setters for `:vec2` uniforms expect a 2-element vector or a number.\n;;   If the latter, it is interpreted as `[n n]`.\n;; - Setters for `:vec3` uniforms expect a 3-element vector, a\n;;   thi.ng/color type or an integer. If the latter, it is interpreted as\n;;   24bit RGB value and converted into a normalized RGB vector (`[r g b]`).\n;; - Setters for `:vec4` uniforms expect a 4-element vector, color type,\n;;   an integer or a CSS color string in `#hex`, `rgba()` or `hsla()`\n;;   form, which is then converted into a normalized RGBA vector (`[r g b\n;;   a]`)\n;; - Values for Matrix uniforms can be specified as vector `[mat default transpose?]`\n;;   to indicate given matrix should be transposed\n\n(defn init-shader-uniforms\n  #?(:clj  [^GL3 gl prog uniforms]\n     :cljs [^WebGLRenderingContext gl prog uniforms])\n  (reduce-kv\n   (fn [umap id type]\n     (let [loc                   #?(:clj  (.glGetUniformLocation gl prog (name id))\n                                    :cljs (.getUniformLocation gl prog (name id)))\n           [type default opt]    (if (sequential? type) type [type])\n           [setter u-cast u-len] (uniform-types type)\n           #?@(:cljs [setter (aget gl (str \"uniform\" setter))])]\n       #?(:clj (prn :uniform-loc id loc))\n       (assoc\n        umap id\n        {:type    type\n         :default default\n         :setter  (cond\n                    (#{:float :int :bool :sampler2D} type)\n                    (fn [x]\n                      #?(:clj  (setter gl loc (u-cast x))\n                         :cljs (.call setter gl loc (u-cast x))))\n\n                    (#{:mat2 :mat3 :mat4} type)\n                    (fn [x]\n                      #?(:clj\n                         (setter gl loc (boolean opt)\n                                 (if (instance? FloatBuffer x)\n                                   x (u-cast x)))\n                         :cljs\n                         (.call setter gl loc (boolean opt)\n                                (if (ta/typed-array? x)\n                                  x (u-cast x)))))\n\n                    (= :vec2 type)\n                    (fn [x]\n                      (let [x (cond\n                                #?@(:clj  [(instance? FloatBuffer x) x]\n                                    :cljs [(ta/typed-array? x) x])\n                                (satisfies? streams/IBuffer x) (streams/get-float-buffer x)\n                                (number? x) (u-cast [x x])\n                                :else (u-cast x))]\n                        #?(:clj  (setter gl loc x)\n                           :cljs (.call setter gl loc x))))\n\n                    (= :vec3 type)\n                    (fn [x]\n                      (let [x (cond\n                                #?@(:clj  [(instance? FloatBuffer x) x]\n                                    :cljs [(ta/typed-array? x) x])\n                                (satisfies? streams/IBuffer x) (streams/get-float-buffer x)\n                                (number? x) (-> x col/int24 col/as-rgba deref (subvec 0 3) u-cast)\n                                :else (u-cast x))]\n                        #?(:clj  (setter gl loc x)\n                           :cljs (.call setter gl loc x))))\n\n                    (= :vec4 type)\n                    (fn [x]\n                      (let [x (cond\n                                #?@(:clj  [(instance? FloatBuffer x) x]\n                                    :cljs [(ta/typed-array? x) x])\n                                (satisfies? streams/IBuffer x) (streams/get-float-buffer x)\n                                (number? x) (-> x col/int24 col/as-rgba streams/get-float-buffer)\n                                (string? x) (-> x col/css col/as-rgba streams/get-float-buffer)\n                                :else (u-cast x))]\n                        #?(:clj  (setter gl loc x)\n                           :cljs (.call setter gl loc x))))\n\n                    :else\n                    (fn [x]\n                      #?(:clj\n                         (setter gl loc\n                                 (if (instance? FloatBuffer x)\n                                   x (u-cast (if (not (sequential? x)) [x] x))))\n                         :cljs\n                         (.call setter gl loc\n                                (if (ta/typed-array? x)\n                                  x (u-cast (if (not (sequential? x)) [x] x)))))))\n         :loc     loc})))\n   {} uniforms))\n\n(defn set-uniform\n  [shader uniforms id val]\n  ;;(#?(:clj prn :cljs debug) :uniform id (get-in shader [:uniforms id :loc]) val)\n  (if-let [u-spec (-> shader (get :uniforms) (get id))]\n    ((get u-spec :setter) (if (fn? val) (val shader uniforms) val))\n    (#?(:clj prn :cljs warn) \"Unknown shader uniform: \" id)))\n\n(defn apply-default-uniforms\n  [shader uniforms]\n  (reduce-kv\n   (fn [_ id val]\n     (if-not (get uniforms id)\n       (if-let [d (get val :default)]\n         (set-uniform shader uniforms id d))))\n   nil (get shader :uniforms)))\n\n;; Shader attributes\n\n(defn init-shader-attribs\n  #?(:clj  [^GL3 gl prog attribs]\n     :cljs [^WebGLRenderingContext gl prog attribs])\n  (reduce-kv\n   (fn [acc id _]\n     (assoc acc id\n            (#?(:clj .glGetAttribLocation :cljs .getAttribLocation) gl prog (name id))))\n   {} attribs))\n\n(defn set-attribute\n  #?(:clj  [^GL3 gl shader id attrib-spec]\n     :cljs [^WebGLRenderingContext gl shader id attrib-spec])\n  (let [{:keys [buffer stride size type normalized? offset loc]} attrib-spec]\n    ;;(#?(:clj prn :cljs debug) :loc id (-> shader (get :attribs) (get id)) :size size (or stride (* 4 size)))\n    (if-let [loc (int (-> shader (get :attribs) (get id)))]\n      (doto gl\n        #?(:clj  (.glBindBuffer glc/array-buffer (.get ^IntBuffer buffer 0))\n           :cljs (.bindBuffer glc/array-buffer buffer))\n        (#?(:clj .glEnableVertexAttribArray :cljs .enableVertexAttribArray) loc)\n        (#?(:clj .glVertexAttribPointer :cljs .vertexAttribPointer)\n         loc\n         (int size)\n         (or type glc/float)\n         (boolean normalized?)\n         (or stride 0)\n         (or offset 0)))\n      (#?(:clj println :cljs warn) (str \"Unknown shader attribute: \" id)))))\n\n(defn disable-attribute\n  #?(:clj  [^GL3 gl shader id]\n     :cljs [^WebGLRenderingContext gl shader id])\n  (if-let [loc (-> shader (get :attribs) (get id))]\n    (do (#?(:clj .glDisableVertexAttribArray :cljs .disableVertexAttribArray) gl loc) gl)\n    (#?(:clj println :cljs warn) (str \"Unknown shader attribute: \" id))))\n\n;; Shader creation\n;;\n;; Header injection\n;;\n;; These boilerplate `#define`s are prepended by default to any given\n;; shader source before compilation with `compile-shader` below.\n\n(def default-prelude\n  \"#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp int;\n  precision highp float;\n  #else\n  precision mediump int;\n  precision mediump float;\n  #endif\n  #ifndef PI\n  #define PI      3.141592653589793\n  #endif\n  #ifndef TWO_PI\n  #define TWO_PI  6.283185307179586\n  #endif\n  #ifndef HALF_PI\n  #define HALF_PI 1.570796326794896\n  #endif\n  #ifndef RAD\n  #define RAD     0.008726646259972\n  #endif\n  \")\n\n;; Creation, compilation & linking\n\n(defn compile-glsl-vars\n  [qualifier coll]\n  (->> coll\n       (map\n        (fn [[id type]]\n          (str qualifier \" \"\n               (name (if (sequential? type) (first type) type)) \" \"\n               (name id) \";\\n\")))\n       (apply str)))\n\n(defn compile-glsl3-attribs\n  [coll]\n  (->> coll\n       (map\n        (fn [[id type]]\n          (if (sequential? type)\n            (str \"layout(location=\" (nth type 1) \") in \" (name (first type)) \" \" (name id) \";\\n\")\n            (str \"in \" (name type) \" \" (name id) \";\\n\"))))\n       (apply str)))\n\n(defn prepare-shader-sources\n  [{:keys [vs fs uniforms attribs varying prelude version]}]\n  (let [gl3?     (and version (>= version 300))\n        u-src    (compile-glsl-vars \"uniform\" uniforms)\n        a-src    (if gl3? (compile-glsl3-attribs attribs) (compile-glsl-vars \"attribute\" attribs))\n        v-src-vs (compile-glsl-vars (if gl3? \"out\" \"varying\") varying)\n        v-src-fs (compile-glsl-vars (if gl3? \"in\" \"varying\") varying)\n        src      (if version (str \"#version \" version \"\\n\") \"\")\n        src      (str src (or prelude default-prelude) u-src)]\n    {:vs-src (str src v-src-vs a-src vs)\n     :fs-src (str src v-src-fs fs)}))\n\n#?(:cljs\n   (defn parse-and-throw-error\n     [^WebGLRenderingContext gl shader src]\n     (let [src-lines (vec (str/split-lines src))\n           errors (->> shader\n                       (.getShaderInfoLog gl)\n                       (str/split-lines)\n                       (map\n                        (fn [line]\n                          (let [[_ ln msg] (re-find #\"ERROR: \\d+:(\\d+): (.*)\" line)]\n                            (when ln\n                              (str \"line \" ln \": \" msg \"\\n\"\n                                   (nth src-lines (js/parseInt ln 10)))))))\n                       (filter identity)\n                       (str/join \"\\n\"))]\n       (.deleteShader gl shader)\n       (err/throw! (str \"Error compiling shader:\\n\" errors)))))\n\n#?(:cljs\n   (defn compile-shader\n     [^WebGLRenderingContext gl src type]\n     (if-let [shader (.createShader gl type)]\n       (do\n         (.shaderSource gl shader src)\n         (.compileShader gl shader)\n         (if (.getShaderParameter gl shader glc/compile-status)\n           shader\n           (parse-and-throw-error gl shader src)))\n       (err/throw! \"Can't create shader\"))))\n\n(defn bind-attrib-locations\n  #?(:clj  [^GL3 gl program attribs]\n     :cljs [^WebGLRenderingContext gl program attribs])\n  (reduce-kv\n   (fn [_ id att]\n     (when (sequential? att)\n       (#?(:clj prn :cljs debug) :bind-attr id (nth att 1))\n       (#?(:clj .glBindAttribLocation :cljs .bindAttribLocation) gl program (nth att 1) (name id))))\n   nil attribs))\n\n#?(:clj\n   (defn make-shader-from-spec\n     ([^GL3 gl spec version]\n      (make-shader-from-spec gl (assoc spec :version version)))\n     ([^GL3 gl spec]\n      (let [{:keys [vs-src fs-src]} (prepare-shader-sources spec)\n            ^{:tag \"[[Ljava.lang.CharSequence;\"} vs' (make-array CharSequence 1 1)\n            ^{:tag \"[[Ljava.lang.CharSequence;\"} fs' (make-array CharSequence 1 1)\n            _       (aset ^{:tag \"[Ljava.lang.CharSequence;\"} (aget vs' 0) 0 vs-src)\n            _       (aset ^{:tag \"[Ljava.lang.CharSequence;\"} (aget fs' 0) 0 fs-src)\n            vs      (ShaderCode. GL3/GL_VERTEX_SHADER 1 vs')\n            fs      (ShaderCode. GL3/GL_FRAGMENT_SHADER 1 fs')\n            prog    (doto (ShaderProgram.)\n                      (.add vs)\n                      (.add fs)\n                      (.init gl))\n            prog-id (.program prog)]\n        (bind-attrib-locations gl prog-id (:attribs spec))\n        (if (.link prog gl System/out)\n          (let [attribs  (init-shader-attribs gl prog-id (:attribs spec))\n                uniforms (init-shader-uniforms gl prog-id (:uniforms spec))]\n            (merge spec\n                   {:program  prog-id\n                    :uniforms uniforms\n                    :attribs  attribs\n                    :vs       vs-src\n                    :fs       fs-src}))\n          (err/throw! (str \"Shader failed to link:\" (ShaderUtil/getProgramInfoLog gl prog-id)))))))\n\n   :cljs\n   (defn make-shader-from-spec\n     [^WebGLRenderingContext gl spec]\n     (let [{:keys [uniforms attribs]} spec\n           {:keys [vs-src fs-src]} (prepare-shader-sources spec)\n           vs       (compile-shader gl vs-src glc/vertex-shader)\n           fs       (compile-shader gl fs-src glc/fragment-shader)\n           prog     (.createProgram gl)]\n       (doto gl\n         (.attachShader prog vs)\n         (.attachShader prog fs)\n         (bind-attrib-locations prog attribs)\n         (.linkProgram prog))\n       (if (.getProgramParameter gl prog glc/link-status)\n         (let [attribs  (init-shader-attribs gl prog attribs)\n               uniforms (init-shader-uniforms gl prog uniforms)]\n           (doto gl\n             (.deleteShader vs)\n             (.deleteShader fs))\n           (merge spec\n                  {:program  prog\n                   :uniforms uniforms\n                   :attribs  attribs\n                   :vs       vs-src\n                   :fs       fs-src}))\n         (err/throw! (str \"Shader failed to link:\" (.getProgramInfoLog gl prog)))))))\n\n#?(:cljs\n   (defn make-shader-from-dom\n     [^WebGLRenderingContext gl {:keys [vs fs] :as spec}]\n     (make-shader-from-spec\n      gl (assoc spec\n                :vs (glu/get-script-text vs)\n                :fs (glu/get-script-text fs)))))\n"]}