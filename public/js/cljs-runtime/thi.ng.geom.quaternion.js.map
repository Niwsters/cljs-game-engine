{"version":3,"sources":["thi/ng/geom/quaternion.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","p__15148","vec__15149","cljs.core.nth","unused__10311__auto__","self__","G__15180","js/Error","args15114","cljs.core/aclone","this__5327__auto__","writer__5328__auto__","opt__5329__auto__","cljs.core/-write","thi.ng.geom.quaternion/Quat4","thi.ng.geom.quaternion/->Quat4","x","y","z","w","_hasheq","_","k","thi.ng.geom.quaternion/swizzle4","nf","fexpr__15172","v","thi.ng.geom.quaternion/swizzle4-assoc","G__15130","thi.ng.xerror.core/key-error!","cljs.core/cons","G__15123","G__15129","thi.ng.geom.vector.vec3","o","c","cljs.core/compare","cljs.core/count","cljs.core/mix-collection-hash","cljs.core/hash","cljs.core/imul","cljs.core/sequential?","cljs.core._EQ_","cljs.core/first","s","theta","t","Math/sin","Math/cos","q","qx","qy","qz","qw","r","rx","ry","rz","rw","x'","y'","z'","w'","thi.ng.math.core/*eps*","eps","and__5041__auto__","thi.ng.math.core/delta=","Math/sqrt","m","d","id","thi.ng.math.core/abs*","vec__15165","Math/acos","stheta","a","b","opts","vec__15143","tx","ty","tz","cljs.core.get","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","thi.ng.geom.matrix/Matrix44","or__5043__auto__","vx","vy","vz","ix","iy","iz","nx","ny","nz","iw","js/Float32Array","thi.ng.geom.vector/Vec3","cljs.core/meta","thi.ng.geom.quaternion/Q","var_args","G__15230","thi.ng.geom.quaternion/quat","p__15241","vec__15243","p__15249","vec__15250","thi.ng.geom.quaternion/quat-from-axis-angle","axis","thi.ng.geom.quaternion.quat","thi.ng.math.core/normalize","thi.ng.geom.quaternion/as-axis-angle","vec__15269","mag","thi.ng.geom.quaternion/quat-from-euler","order","alpha","beta","gamma","vec__15275","G__15278","cljs.core/Keyword","thi.ng.geom.vector/V3X","thi.ng.geom.vector/V3Y","thi.ng.geom.vector/V3Z","thi.ng.xerror.core.illegal_arg_BANG_","thi.ng.geom.quaternion/quat-from-matrix","trace","s'","thi.ng.geom.quaternion/alignment-quat","from","to","thi.ng.math.core/cross","Math/atan2","thi.ng.math.core/mag","thi.ng.math.core/dot","thi.ng.geom.quaternion/lookup4","G__15290","default","G__15291","G__15292","n","cljs.core/name","G__15294","thi.ng.geom.vector.vec2","thi.ng.geom.quaternion/swizzle-assoc*","ctor","keymap","cljs.core.into","acc","cljs.core/vec","cljs.core/seq","i","cljs.core.assoc","G__15305","cljs.core/next","G__15307","G__15310"],"sourcesContent":["(ns thi.ng.geom.quaternion\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3 V3X V3Y V3Z]]\n   [thi.ng.geom.matrix :as mat]\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [*eps* PI TWO_PI]]\n   #?(:clj [thi.ng.math.macros :as mm]))\n  #?(:clj\n     (:import\n      [thi.ng.geom.matrix Matrix44])))\n\n(declare swizzle4 swizzle4-assoc)\n\n(deftype Quat4\n    #?(:clj\n       [^double x ^double y ^double z ^double w\n        ^:unsynchronized-mutable _hasheq\n        ^:unsynchronized-mutable _hashc]\n       :cljs\n       [x y z w ^:mutable _hasheq])\n\n  #?@(:clj\n      [clojure.lang.ILookup\n       (valAt\n        [_ k] (swizzle4 _ k nil))\n       (valAt\n        [_ k nf] (swizzle4 _ k nf))\n\n       java.util.concurrent.Callable\n       (call\n        [_] (.invoke ^clojure.lang.IFn _))\n\n       java.lang.Runnable\n       (run\n         [_] (.invoke ^clojure.lang.IFn _))\n\n       clojure.lang.IFn\n       (invoke\n        [_ k] (swizzle4 _ k nil))\n       (invoke\n        [_ k nf] (swizzle4 _ k nf))\n       (applyTo\n        [_ args]\n        (condp == (count args)\n          1 (swizzle4 _ (first args) nil)\n          2 (swizzle4 _ (first args) (second args))\n          (err/arity-error! (count args))))\n\n       clojure.lang.Associative\n       clojure.lang.IPersistentVector\n       (count\n        [_] 4)\n       (length\n        [_] 4)\n       (containsKey\n        [_ k] (not (nil? (#{0 1 2 3 :x :y :z :w} k))))\n       (entryAt\n        [_ k] (clojure.lang.MapEntry. k (swizzle4 _ k nil)))\n       (assoc\n        [_ k v] (swizzle4-assoc _ k v))\n       (assocN\n        [_ k v]\n        (case (int k)\n          0 (Quat4. v y z w -1 #?(:clj -1))\n          1 (Quat4. x v z w -1 #?(:clj -1))\n          2 (Quat4. x y v w -1 #?(:clj -1))\n          3 (Quat4. x y z v -1 #?(:clj -1))\n          (err/key-error! k)))\n\n       java.util.Collection\n       (isEmpty\n        [_] false)\n       (iterator\n        [_] (.iterator ^java.util.Collection (list x y z w)))\n       (toArray\n        [_] (double-array 4 [x y z w]))\n       (size\n        [_] 4)\n\n       clojure.lang.IPersistentCollection\n       clojure.lang.Indexed\n       clojure.lang.Sequential\n       clojure.lang.Seqable\n       java.util.List\n       (seq\n        [_] (seq [x y z w]))\n       (empty\n        [_] (err/unsupported!))\n       (cons\n        [_ v] [x y z w v])\n       (peek\n        [_] w)\n       (pop\n        [_] (vec3 x y z))\n       (rseq\n        [_] (Quat4. w z y x -1 #?(:clj -1)))\n       (get\n        [_ k] (case (int k) 0 x, 1 y, 2 z, 3 w, (err/key-error! k)))\n       (nth\n        [_ k] (case (int k) 0 x, 1 y, 2 z, 3 w, (err/key-error! k)))\n       (nth\n        [_ k nf] (case (int k) 0 x, 1 y, 2 z, 3 w, nf))\n       (equiv\n        [_ o]\n        (if (instance? Quat4 o)\n          (and (clojure.lang.Numbers/equiv x (.-x ^Quat4 o))\n               (clojure.lang.Numbers/equiv y (.-y ^Quat4 o))\n               (clojure.lang.Numbers/equiv z (.-z ^Quat4 o))\n               (clojure.lang.Numbers/equiv w (.-w ^Quat4 o)))\n          (and (instance? java.util.Collection o)\n               (== 4 (count o))\n               (clojure.lang.Util/equiv x (first o))\n               (clojure.lang.Util/equiv y (nth o 1))\n               (clojure.lang.Util/equiv z (nth o 2))\n               (clojure.lang.Util/equiv w (nth o 3)))))\n       (equals\n        [_ o]\n        (if (instance? Quat4 o)\n          (and (clojure.lang.Util/equals x (.-x ^Quat4 o))\n               (clojure.lang.Util/equals y (.-y ^Quat4 o))\n               (clojure.lang.Util/equals z (.-z ^Quat4 o))\n               (clojure.lang.Util/equals w (.-w ^Quat4 o)))\n          (and (instance? java.util.Collection o)\n               (== 4 (count o))\n               (clojure.lang.Util/equals x (first o))\n               (clojure.lang.Util/equals y (nth o 1))\n               (clojure.lang.Util/equals z (nth o 2))\n               (clojure.lang.Util/equals w (nth o 3)))))\n\n       Comparable\n       (compareTo\n        [_ o]\n        (if (instance? Quat4 o)\n          (let [c (compare x (.-x ^Quat4 o))]\n            (if (== 0 c)\n              (let [c (compare y (.-y ^Quat4 o))]\n                (if (== 0 c)\n                  (let [c (compare z (.-z ^Quat4 o))]\n                    (if (== 0 c)\n                      (compare w (.-w ^Quat4 o))\n                      c))\n                  c))\n              c))\n          (let [c (count o)]\n            (if (== 4 c) (- (compare o _)) (- 4 c)))))\n       (hashCode\n        [_]\n        (if (== -1 _hashc)\n          (set! _hashc\n                (-> 31\n                    (unchecked-add-int (hash x))\n                    (unchecked-multiply-int 31)\n                    (unchecked-add-int (hash y))\n                    (unchecked-multiply-int 31)\n                    (unchecked-add-int (hash z))\n                    (unchecked-multiply-int 31)\n                    (unchecked-add-int (hash w))))\n          _hashc))\n\n       clojure.lang.IHashEq\n       (hasheq\n        [_]\n        (if (== -1 _hasheq)\n          (set! _hasheq\n                (mix-collection-hash\n                 (if (== -1 _hashc)\n                   (set! _hashc\n                         (-> 31\n                             (unchecked-add-int (hash x))\n                             (unchecked-multiply-int 31)\n                             (unchecked-add-int (hash y))\n                             (unchecked-multiply-int 31)\n                             (unchecked-add-int (hash z))\n                             (unchecked-multiply-int 31)\n                             (unchecked-add-int (hash w))))\n                   _hashc)\n                 4))\n          _hasheq))]\n\n      :cljs\n      [ICloneable\n       (-clone\n        [_] (Quat4. x y z w -1))\n\n       ILookup\n       (-lookup\n        [_ k] (swizzle4 _ k nil))\n       (-lookup\n        [_ k nf] (swizzle4 _ k nf))\n\n       IFn\n       (-invoke\n        [_ k] (swizzle4 _ k nil))\n       (-invoke\n        [_ k nf] (swizzle4 _ k nf))\n\n       ICounted\n       (-count\n        [_] 4)\n\n       IAssociative\n       (-contains-key?\n        [_ k] (not (nil? (#{0 1 2 3 :x :y :z :w} k))))\n       (-assoc\n        [_ k v] (swizzle4-assoc _ k v))\n\n       IVector\n       (-assoc-n\n        [_ k v]\n        (case (int k)\n          0 (Quat4. v y z w -1 #?(:clj -1))\n          1 (Quat4. x v z w -1 #?(:clj -1))\n          2 (Quat4. x y v w -1 #?(:clj -1))\n          3 (Quat4. x y z v -1 #?(:clj -1))\n          (err/key-error! k)))\n\n       ISequential\n       ISeq\n       (-first\n        [_] x)\n       (-rest\n        [_] (cons y (cons z (cons w nil))))\n\n       INext\n       (-next\n        [_] (cons y (cons z (cons w nil))))\n\n       ISeqable\n       (-seq\n        [_] _)\n\n       IReversible\n       (-rseq\n        [_] (Quat4. w z y x -1 #?(:clj -1)))\n\n       IIndexed\n       (-nth\n        [_ k] (case (int k) 0 x, 1 y, 2 z, 3 w, (err/key-error! k)))\n       (-nth\n        [_ k nf] (case (int k) 0 x, 1 y, 2 z, 3 w, nf))\n\n       ICollection\n       (-conj\n        [_ v] [x y z w v])\n\n       IStack\n       (-peek\n        [_] w)\n       (-pop\n        [_] (vec3 x y z))\n\n       IComparable\n       (-compare\n        [_ o]\n        (if (instance? Quat4 o)\n          (let [c (compare x (.-x ^Quat4 o))]\n            (if (== 0 c)\n              (let [c (compare y (.-y ^Quat4 o))]\n                (if (== 0 c)\n                  (let [c (compare z (.-z ^Quat4 o))]\n                    (if (== 0 c)\n                      (compare w (.-w ^Quat4 o))\n                      c))\n                  c))\n              c))\n          (let [c (count o)]\n            (if (== 4 c) (- (compare o _)) (- 4 c)))))\n\n       IHash\n       (-hash\n        [_]\n        (if (== -1 _hasheq)\n          (set! _hasheq\n                (mix-collection-hash\n                 (-> (+ 31 (hash x))\n                     (bit-or 0)\n                     (imul 31) (+ (hash y))\n                     (bit-or 0)\n                     (imul 31) (+ (hash z))\n                     (bit-or 0)\n                     (imul 31) (+ (hash w))\n                     (bit-or 0))\n                 4))\n          _hasheq))\n\n       IEquiv\n       (-equiv\n        [_ o]\n        (if (instance? Quat4 o)\n          (and (== x (.-x ^Quat4 o)) (== y (.-y ^Quat4 o))\n               (== z (.-z ^Quat4 o)) (== w (.-w ^Quat4 o)))\n          (and (sequential? o) (== 4 (count o))\n               (= x (first o)) (= y (nth o 1))\n               (= z (nth o 2)) (= w (nth o 3)))))])\n  Object\n  (toString\n    [_] (str \"[\" x \" \" y \" \" z \" \" w \"]\"))\n\n  g/IScale\n  (scale\n    [_ s]\n    (Quat4. (* x s) (* y s) (* z s) (* w s) -1 #?(:clj -1)))\n\n  g/IRotate3D\n  (rotate-x\n    [_ theta]\n    (let [t (/ theta 2.0)\n          s (Math/sin t) c (Math/cos t)]\n      (Quat4.\n       (mm/madd x c w s)\n       (mm/madd y c z s)\n       (mm/msub z c y s)\n       (mm/msub w c x s)\n       -1 #?(:clj -1))))\n  (rotate-y\n    [_ theta]\n    (let [t (/ theta 2.0)\n          s (Math/sin t) c (Math/cos t)]\n      (Quat4.\n       (mm/msub x c z s)\n       (mm/madd y c w s)\n       (mm/madd z c x s)\n       (mm/msub w c y s)\n       -1 #?(:clj -1))))\n  (rotate-z\n    [_ theta]\n    (let [t (/ theta 2.0)\n          s (Math/sin t) c (Math/cos t)]\n      (Quat4.\n       (mm/madd x c y s)\n       (mm/msub y c x s)\n       (mm/madd z c w s)\n       (mm/msub w c z s)\n       -1 #?(:clj -1))))\n\n  m/IMathOps\n  (+\n    [_ q]\n    (let [q ^Quat4 q]\n      (Quat4.\n       (+ x (.-x q))\n       (+ y (.-y q))\n       (+ z (.-z q))\n       (+ w (.-w q))\n       -1 #?(:clj -1))))\n  (-\n    [_ q]\n    (let [q ^Quat4 q]\n      (Quat4.\n       (- x (.-x q))\n       (- y (.-y q))\n       (- z (.-z q))\n       (- w (.-w q))\n       -1 #?(:clj -1))))\n  (*\n    [_ q]\n    (let [q ^Quat4 q\n          qx (.-x q) qy (.-y q) qz (.-z q) qw (.-w q)]\n      (Quat4.\n       (mm/maddsub x qw w qx y qz z qy)\n       (mm/maddsub y qw w qy z qx x qz)\n       (mm/maddsub z qw w qz x qy y qx)\n       (mm/msub w qw x qx y qy z qz)\n       -1 #?(:clj -1))))\n  (*\n    [_ q r]\n    (let [q ^Quat4 q r ^Quat4 r\n          qx (.-x q) qy (.-y q) qz (.-z q) qw (.-w q)\n          rx (.-x r) ry (.-y r) rz (.-z r) rw (.-w r)\n          x' (mm/maddsub x qw w qx y qz z qy)\n          y' (mm/maddsub y qw w qy z qx x qz)\n          z' (mm/maddsub z qw w qz x qy y qx)\n          w' (mm/msub w qw x qx y qy z qz)]\n      (Quat4.\n       (mm/maddsub x' rw w' rx y' rz z' ry)\n       (mm/maddsub y' rw w' ry z' rx x' rz)\n       (mm/maddsub z' rw w' rz x' ry y' rx)\n       (mm/msub w' rw x' rx y' ry z' rz)\n       -1 #?(:clj -1))))\n\n  m/IDeltaEquals\n  (delta=\n    [_ q] (m/delta= _ q *eps*))\n  (delta=\n    [_ q eps]\n    (and (sequential? q)\n         (== 4 (count q))\n         (m/delta= x (first q) eps)\n         (m/delta= y (nth q 1) eps)\n         (m/delta= z (nth q 2) eps)\n         (m/delta= w (nth q 3) eps)))\n\n  m/IDotProduct\n  (dot\n    [_ q]\n    (let [q ^Quat4 q]\n      (mm/madd x (.-x q) y (.-y q) z (.-z q) w (.-w q))))\n\n  m/IMagnitude\n  (mag\n    [_] (Math/sqrt (mm/madd x x y y z z w w)))\n  (mag-squared\n    [_] (mm/madd x x y y z z w w))\n\n  m/INormalize\n  (normalize [_]\n    (let [m (Math/sqrt (mm/madd x x y y z z w w))]\n      (if (> m *eps*)\n        (Quat4. (/ x m) (/ y m) (/ z m) (/ w m) -1 #?(:clj -1))\n        _)))\n\n  m/IConjugate\n  (conjugate [_]\n    (Quat4. (- x) (- y) (- z) w -1 #?(:clj -1)))\n\n  m/IInvert\n  (invert [_]\n    (let [d (m/mag-squared _)\n          d (if (zero? d) 0.0 (/ d))\n          id (- d)]\n      (Quat4. (* x id) (* y id) (* z id) (* w d) -1 #?(:clj -1))))\n\n  m/IInterpolate\n  (mix [_ q] (m/mix _ q 0.5))\n  (mix [_ q t]\n    (let [d (m/dot _ q)]\n      (if (< (m/abs* d) 1.0)\n        (let [theta (Math/acos d)\n              stheta (Math/sqrt (mm/madd d (- d) 1.0))\n              [a b] (if (< (m/abs* stheta) 0.001)\n                      [0.5 0.5]\n                      [(/ (Math/sin (mm/subm 1.0 t theta)) stheta)\n                       (/ (Math/sin (* t theta)) stheta)])\n              q ^Quat4 q]\n          (Quat4.\n           (mm/madd x a (.-x q) b)\n           (mm/madd y a (.-y q) b)\n           (mm/madd z a (.-z q) b)\n           (mm/madd w a (.-w q) b)\n           -1 #?(:clj -1)))\n        _)))\n\n  g/IMatrixConvert\n  (as-matrix\n    [_] (g/as-matrix _ nil))\n  (as-matrix\n    [_ opts]\n    (let [[tx ty tz] (get opts :translate)\n          x2 (+ x x)\n          y2 (+ y y)\n          z2 (+ z z)\n          xx (* x x2)\n          xy (* x y2)\n          xz (* x z2)\n          yy (* y y2)\n          yz (* y z2)\n          zz (* z z2)\n          wx (* w x2)\n          wy (* w y2)\n          wz (* w z2)]\n      (thi.ng.geom.matrix.Matrix44.\n       (- 1.0 (+ yy zz)) (+ xy wz) (- xz wy) 0.0\n       (- xy wz) (- 1.0 (+ xx zz)) (+ yz wx) 0.0\n       (+ xz wy) (- yz wx) (- 1.0 (+ xx yy)) 0.0\n       (or tx 0.0) (or ty 0.0) (or tz 0.0) 1.0\n       nil nil)))\n\n  g/IVectorTransform\n  (transform-vector\n    [_ [vx vy vz :as v]]\n    (let [ix (mm/maddsub w vx y vz z vy)\n          iy (mm/maddsub w vy z vx x vz)\n          iz (mm/maddsub w vz x vy y vx)\n          nx (- x) ny (- y) nz (- z)\n          iw (mm/msub nx vx y vy z vz)\n          ^doubles b #?(:clj (double-array 3) :cljs (js/Float32Array. 3))]\n      (aset b 0 (double (mm/maddsub ix w iw nx iy nz iz ny)))\n      (aset b 1 (double (mm/maddsub iy w iw ny iz nx ix nz)))\n      (aset b 2 (double (mm/maddsub iz w iw nz ix ny iy nx)))\n      (thi.ng.geom.vector.Vec3. b nil (meta v)))))\n\n#?(:clj (defmethod print-method Quat4 [^Quat4 o ^java.io.Writer w] (.write w (.toString o))))\n\n(def Q (Quat4. 0.0 0.0 0.0 1.0 -1 #?(:clj -1)))\n\n(defn quat\n  ([] Q)\n  ([[x y z] w] (Quat4. x y z w -1 #?(:clj -1)))\n  ([[x y z w]] (Quat4. x y z w -1 #?(:clj -1)))\n  ([x y z w] (Quat4. x y z w -1 #?(:clj -1))))\n\n(defn quat-from-axis-angle\n  [axis theta]\n  (let [theta (/ theta 2.0)]\n    (quat (m/normalize (vec3 axis) (Math/sin theta)) (Math/cos theta))))\n\n(defn as-axis-angle\n  [q]\n  (let [[x y z w] (m/normalize q)\n        theta (* 2.0 (Math/acos w))\n        mag (Math/sqrt (- 1.0 (* w w)))]\n    (if (< mag 0.0005)\n      [(vec3 x y z) theta]\n      [(vec3 (/ x mag) (/ y mag) (/ z mag)) theta])))\n\n(defn quat-from-euler\n  [order alpha beta gamma]\n  (let [[a b c] (case order\n                  :xyz [V3X V3Y V3Z]\n                  :yxz [V3Y V3X V3Z]\n                  :xzy [V3X V3Z V3Y]\n                  :zxy [V3Z V3X V3Y]\n                  :yzx [V3Y V3Z V3X]\n                  :zyx [V3Z V3Y V3X]\n                  (err/illegal-arg! order))]\n    (m/* (quat-from-axis-angle a alpha)\n         (quat-from-axis-angle b beta)\n         (quat-from-axis-angle c gamma))))\n\n;; Allan and Mark Watt's \"Advanced Animation and Rendering Techniques\"\n;; (ACM Press 1992)\n;; http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n\n(defn quat-from-matrix\n  [^Matrix44 m]\n  (let [trace (mm/add (.-m00 m) (.-m11 m) (.-m22 m))]\n    (if (pos? trace)\n      (let [s (/ 0.5 (Math/sqrt (inc trace)))]\n        (Quat4.\n         (mm/subm (.-m12 m) (.-m21 m) s)\n         (mm/subm (.-m20 m) (.-m02 m) s)\n         (mm/subm (.-m01 m) (.-m10 m) s)\n         (/ 0.25 s)\n         -1 #?(:clj -1)))\n      (if (and (> (.-m00 m) (.-m11 m)) (> (.-m00 m) (.-m22 m)))\n        (let [s (* 2.0 (Math/sqrt (inc (mm/sub (.-m00 m) (.-m11 m) (.-m22 m)))))\n              s' (/ s)]\n          (Quat4.\n           (* 0.25 s)\n           (mm/addm (.-m10 m) (.-m01 m) s')\n           (mm/addm (.-m20 m) (.-m02 m) s')\n           (mm/subm (.-m12 m) (.-m21 m) s')\n           -1 #?(:clj -1)))\n        (if (> (.-m11 m) (.-m22 m))\n          (let [s (* 2.0 (Math/sqrt (inc (mm/sub (.-m11 m) (.-m22 m) (.-m00 m)))))\n                s' (/ s)]\n            (Quat4.\n             (mm/addm (.-m10 m) (.-m01 m) s')\n             (* 0.25 s)\n             (mm/addm (.-m21 m) (.-m12 m) s')\n             (mm/subm (.-m20 m) (.-m02 m) s')\n             -1 #?(:clj -1)))\n          (let [s (* 2.0 (Math/sqrt (inc (mm/sub (.-m22 m) (.-m00 m) (.-m11 m)))))\n                s' (/ s)]\n            (Quat4.\n             (mm/addm (.-m20 m) (.-m02 m) s')\n             (mm/addm (.-m21 m) (.-m12 m) s')\n             (* 0.25 s)\n             (mm/subm (.-m01 m) (.-m10 m) s')\n             -1 #?(:clj -1))))))))\n\n(defn alignment-quat\n  [from to]\n  (let [from  (m/normalize from)\n        to    (m/normalize to)\n        axis  (m/cross from to)\n        theta (Math/atan2 (m/mag axis) (m/dot from to))]\n    (quat-from-axis-angle axis theta)))\n\n(defn lookup4\n  [^Quat4 _ k nf]\n  (case k\n    \\x (.-x _)\n    \\y (.-y _)\n    \\z (.-z _)\n    \\w (.-w _)\n    (or nf (err/key-error! k))))\n\n(defn swizzle4\n  [^Quat4 _ k default]\n  (if (number? k)\n    (case (int k)\n      0 (.-x _)\n      1 (.-y _)\n      2 (.-z _)\n      3 (.-w _)\n      (or default (err/key-error! k)))\n    (case k\n      :x (.-x _)\n      :y (.-y _)\n      :z (.-z _)\n      :w (.-w _)\n      (let [n (name k) c (count n)]\n        (case c\n          2 (vec2\n             (lookup4 _ (first n) default)\n             (lookup4 _ (nth n 1) default))\n          3 (vec3\n             (lookup4 _ (first n) default)\n             (lookup4 _ (nth n 1) default)\n             (lookup4 _ (nth n 2) default))\n          4 (Quat4.\n             (lookup4 _ (first n) default)\n             (lookup4 _ (nth n 1) default)\n             (lookup4 _ (nth n 2) default)\n             (lookup4 _ (nth n 3) default)\n             -1 #?(:clj -1))\n          (or default (err/key-error! k)))))))\n\n(defn swizzle-assoc*\n  [_ ctor keymap k v]\n  (let [n (name k)\n        c (count n)]\n    (if (and (<= c (count keymap)) (== c (count v) (count (into #{} n))))\n      (loop [acc (vec (seq _)), i 0, n n]\n        (if n\n          (recur (assoc acc (keymap (first n)) (v i)) (inc i) (next n))\n          (ctor acc)))\n      (err/key-error! k))))\n\n(defn swizzle4-assoc\n  [^Quat4 _ k v]\n  (if (number? k)\n    (case (int k)\n      0 (Quat4. v (.-y _) (.-z _) (.-w _) -1 #?(:clj -1))\n      1 (Quat4. (.-x _) v (.-z _) (.-w _) -1 #?(:clj -1))\n      2 (Quat4. (.-x _) (.-y _) v (.-w _) -1 #?(:clj -1))\n      3 (Quat4. (.-x _) (.-y _) (.-z _) v -1 #?(:clj -1))\n      (err/key-error! k))\n    (case k\n      :x (Quat4. v (.-y _) (.-z _) (.-w _) -1 #?(:clj -1))\n      :y (Quat4. (.-x _) v (.-z _) (.-w _) -1 #?(:clj -1))\n      :z (Quat4. (.-x _) (.-y _) v (.-w _) -1 #?(:clj -1))\n      :w (Quat4. (.-x _) (.-y _) (.-z _) v -1 #?(:clj -1))\n      (swizzle-assoc* _ quat {\\x 0 \\y 1 \\z 2 \\w 3} k v))))\n"]}