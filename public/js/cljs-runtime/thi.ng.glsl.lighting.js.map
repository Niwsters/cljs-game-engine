{"version":3,"sources":["thi/ng/glsl/lighting.cljc"],"mappings":"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","names":["cljs.core.alter_meta_BANG_","thi.ng.glsl.lighting/lambert","cljs.core/merge","thi.ng.glsl.lighting/lambert-abs","thi.ng.glsl.lighting/phong","thi.ng.glsl.lighting/blinn-phong","thi.ng.glsl.lighting/schlick","thi.ng.glsl.lighting/schlick-r0","thi.ng.glsl.lighting/beckmann-distribution","thi.ng.glsl.lighting/beckmann-specular","thi.ng.glsl.lighting/gaussian-specular","thi.ng.glsl.lighting/cook-torrance","thi.ng.glsl.lighting/oren-nayar","thi.ng.glsl.lighting/ward","thi.ng.glsl.lighting/skylight","thi.ng.glsl.lighting/skylight-color","thi.ng.glsl.lighting/spotlight-attenuation","thi.ng.glsl.lighting/spotlight-influence"],"sourcesContent":["(ns thi.ng.glsl.lighting\n  (:require\n   [thi.ng.glsl.core :as glsl :include-macros true]))\n\n(glsl/defglsl lambert\n  nil \"\nfloat lambert(vec3 surfaceNormal, vec3 lightDirection) {\n  return clamp(dot(surfaceNormal, lightDirection), 0.0, 1.0);\n}\")\n\n(glsl/defglsl lambert-abs\n  nil \"\nfloat lambertAbs(vec3 surfaceNormal, vec3 lightDirection) {\n  return clamp(abs(dot(surfaceNormal, lightDirection)), 0.0, 1.0);\n}\")\n\n(glsl/defglsl phong\n  nil \"\nfloat phong(vec3 lightDir, vec3 eyeDir, vec3 surfaceNormal) {\n  return dot(reflect(-lightDir, surfaceNormal), eyeDir);\n}\")\n\n(glsl/defglsl blinn-phong\n  nil \"\nfloat blinnPhong(vec3 lightDir, vec3 eyeDir, vec3 surfaceNormal) {\n  return dot(normalize(lightDir + eyeDir), surfaceNormal);\n}\")\n\n(glsl/defglsl schlick\n  nil \"\nfloat schlick(float r0, float smooth, vec3 normal, vec3 view) {\n  float d = clamp(1.0 - dot(normal, -view), 0.0, 1.0);\n  float d2 = d * d;\n  return mix(r0, 1.0, smooth * d2 * d2 * d);\n}\")\n\n(glsl/defglsl schlick-r0\n  nil \"\nfloat schlickR0(float ior1, float ior2) {\n  float r = (ior1 - ior2) / (ior1 + ior2);\n  return r * r;\n}\")\n\n(glsl/defglsl beckmann-distribution\n  nil \"\nfloat beckmannDistribution(float x, float roughness) {\n  float NdotH = max(x, 1e-4);\n  float cos2Alpha = NdotH * NdotH;\n  float tan2Alpha = (cos2Alpha - 1.0) / cos2Alpha;\n  float roughness2 = roughness * roughness;\n  float denom = PI * roughness2 * cos2Alpha * cos2Alpha;\n  return exp(tan2Alpha / roughness2) / denom;\n}\")\n\n(glsl/defglsl beckmann-specular\n  [beckmann-distribution] \"\nfloat beckmannSpecular(vec3 lightDirection,\n                       vec3 viewDirection,\n                       vec3 surfaceNormal,\n                       float roughness) {\n  return beckmannDistribution(dot(surfaceNormal, normalize(lightDirection + viewDirection)), roughness);\n}\")\n\n(glsl/defglsl gaussian-specular\n  nil \"\nfloat gaussianSpecular(vec3 lightDirection,\n                       vec3 viewDirection,\n                       vec3 surfaceNormal,\n                       float shininess) {\n  vec3 H = normalize(lightDirection + viewDirection);\n  float theta = acos(dot(H, surfaceNormal));\n  float w = theta / shininess;\n  return exp(-w * w);\n}\")\n\n(glsl/defglsl cook-torrance\n  [beckmann-distribution] \"\nfloat cookTorrance(vec3 lightDirection,\n                   vec3 viewDirection,\n                   vec3 surfaceNormal,\n                   float roughness,\n                   float fresnel) {\n\n  float VdotN = max(dot(viewDirection, surfaceNormal), 0.0);\n  float LdotN = max(dot(lightDirection, surfaceNormal), 0.0);\n\n  //Half angle vector\n  vec3 H = normalize(lightDirection + viewDirection);\n\n  //Geometric term\n  float NdotH = max(dot(surfaceNormal, H), 0.0);\n  float VdotH = max(dot(viewDirection, H), 1e-6);\n  float LdotH = max(dot(lightDirection, H), 1e-6);\n  float G1 = (2.0 * NdotH * VdotN) / VdotH;\n  float G2 = (2.0 * NdotH * LdotN) / LdotH;\n  float G = min(1.0, min(G1, G2));\n\n  //Distribution term\n  float D = beckmannDistribution(NdotH, roughness);\n\n  //Fresnel term\n  float F = pow(1.0 - VdotN, fresnel);\n\n  //Multiply terms and done\n  return G * F * D / max(PI * VdotN, 1e-6);\n}\")\n\n(glsl/defglsl oren-nayar\n  nil \"\nfloat orenNayar(vec3 lightDirection,\n                vec3 viewDirection,\n                vec3 surfaceNormal,\n                float roughness,\n                float albedo) {\n\n  float LdotV = dot(lightDirection, viewDirection);\n  float NdotL = dot(lightDirection, surfaceNormal);\n  float NdotV = dot(surfaceNormal, viewDirection);\n\n  float s = LdotV - NdotL * NdotV;\n  float t = mix(1.0, max(NdotL, NdotV), step(0.0, s));\n\n  float sigma2 = roughness * roughness;\n  float A = 1.0 + sigma2 * (albedo / (sigma2 + 0.13) + 0.5 / (sigma2 + 0.33));\n  float B = 0.45 * sigma2 / (sigma2 + 0.09);\n\n  return albedo * max(0.0, NdotL) * (A + B * s / t) / PI;\n}\")\n\n(glsl/defglsl ward\n  nil \"\nfloat ward(vec3 lightDirection,\n           vec3 viewDirection,\n           vec3 surfaceNormal,\n           vec3 fiberParallel,\n           vec3 fiberPerpendicular,\n           float shinyParallel,\n           float shinyPerpendicular) {\n\n  float NdotL = dot(surfaceNormal, lightDirection);\n  float NdotR = dot(surfaceNormal, viewDirection);\n\n  if(NdotL < 0.0 || NdotR < 0.0) {\n    return 0.0;\n  }\n\n  vec3 H = normalize(lightDirection + viewDirection);\n\n  float NdotH = dot(surfaceNormal, H);\n  float XdotH = dot(fiberParallel, H);\n  float YdotH = dot(fiberPerpendicular, H);\n\n  float coeff = sqrt(NdotL/NdotR) / (2.0 * TWO_PI * shinyParallel * shinyPerpendicular);\n  float theta = (pow(XdotH/shinyParallel, 2.0) + pow(YdotH/shinyPerpendicular, 2.0)) / (1.0 + NdotH);\n\n  return coeff * exp(-2.0 * theta);\n}\")\n\n(glsl/defglsl skylight\n  nil \"\nfloat skylight(float height){\n  return smoothstep(0.0, PI, PI - acos(height));\n}\")\n\n(glsl/defglsl skylight-color\n  [skylight] \"\nvec3 skylightColor(vec3 col1, vec3 col2, float height) {\n  return mix(col1, col2, skylight(height));\n}\")\n\n(glsl/defglsl spotlight-attenuation\n  nil \"\nfloat spotlightAttenuation(vec3 dir, float amp){\n  float dist = length(dir);\n  float radiance = 1.0 / (1.0 + pow(dist / amp, 2.0));\n  return clamp(radiance * amp, 0.0, 1.0);\n}\")\n\n(glsl/defglsl spotlight-influence\n  nil \"\nfloat spotlightInfluence(vec3 normal, float coneAngle, float fallOffAngle){\n  float minConeAngle = (360.0 - coneAngle - fallOffAngle) * RAD;\n  float maxConeAngle = (360.0 - coneAngle) * RAD;\n  return smoothstep(minConeAngle, maxConeAngle, acos(normal.z));\n}\")\n"]}