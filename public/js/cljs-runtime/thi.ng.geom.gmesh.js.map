{"version":3,"sources":["thi/ng/geom/gmesh.cljc"],"mappings":"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","names":["p__15063","p__15064","map__15066","cljs.core/--destructure-map","cljs.core.get","vec__15068","cljs.core.nth","thi.ng.geom.gmesh/add-face*","vertices","edges","faces","mesh","verts","f","p1__15056#","cljs.core.mapv","cljs.core/find","cljs.core._EQ_","cljs.core/count","cljs.core/set","mf","thi.ng.geom.meshface/MeshFace","thi.ng.dstruct.core/wrap-seq","cljs.core/peek","cljs.core/first","cljs.core.partition","cljs.core.reduce","p__15082","vec__15084","acc","p","c","n","thi.ng.dstruct.core/index-kv","cljs.core.conj","pair","cljs.core.assoc","p__15091","vec__15092","thi.ng.geom.gmesh/vertices-planar?","a","b","or__5043__auto__","thi.ng.geom.utils.ortho_normal","p1__15090#","cljs.core/every?","thi.ng.math.core/delta=","cljs.core/rest","p__15106","map__15107","thi.ng.geom.gmesh/face-neighbors-shared-edges","cljs.core.into","G__15110","cljs.core.disj","p__15115","map__15117","thi.ng.geom.gmesh/vertex-neighbors*","v","clojure.set.union","thi.ng.dstruct.core.value_set","thi.ng.geom.gmesh/vertex-valence*","thi.ng.geom.gmesh/vertex-faces*","thi.ng.geom.gmesh/remove-vertex*","thi.ng.geom.core/remove-face","var_args","G__15128","thi.ng.geom.gmesh/replace-vertex*","js/Error","v2","vfaces","thi.ng.geom.gmesh.replace_vertex_STAR_","p1__15125#","p2__15126#","cljs.core.replace","thi.ng.geom.gmesh/merge-vertices*","fexpr__15133","fa","fb","ab-isec","clojure.set.intersection","a-xor","clojure.set.difference","b-xor","mp","thi.ng.math.core/mix","thi.ng.geom.gmesh/gmesh","thi.ng.geom.types/GMesh","G__15137","thi.ng.geom.gmesh/lathe-mesh","points","res","phi","rot-fn","thi.ng.geom.gmesh.lathe_mesh","face-fn","strips","i","theta","p1__15134#","thi.ng.math.core/*eps*","cljs.core/butlast","thi.ng.math.core/norm-range","thi.ng.math.core/TWO_PI","make-face","p__15156","p__15157","vec__15158","vec__15161","a1","a2","b1","b2","cljs.core/PersistentHashSet","and__5041__auto__","cljs.core.mapcat","p__15168","vec__15169","sa","sb","thi.ng.geom.utils/into-mesh","thi.ng.geom.gmesh/saddle","s","sv","thi.ng.geom.vector.vec3","p__15173","vec__15174","m","flags","thi.ng.geom.core/as-mesh","thi.ng.geom.types/AABB","cljs.core/PROTOCOL_SENTINEL","_","thi.ng.geom.utils.total_area_3d","thi.ng.geom.meshface/xf-face-verts","thi.ng.geom.utils/bounding-box","cljs.core/keys","thi.ng.geom.utils/axis-range","thi.ng.geom.utils.bounding_sphere","thi.ng.geom.core/centroid","thi.ng.geom.core/vertices","thi.ng.geom.core/center","o","thi.ng.geom.core/translate","thi.ng.math.core/-","thi.ng.geom.utils/centroid","thi.ng.geom.utils/map-mesh","cljs.core/vec","cljs.core/rseq","opts","p1__15181#","cljs.core.map","thi.ng.geom.core/raw","face","p__15206","map__15207","map__15212","fnormals","vnormals","fv","vnorms","fedges","vec__15216","e","efaces","cljs.core/seq","cljs.core.dissoc","ve","p1__15182#","cljs.core.filter","cljs.core.not_EQ_","cljs.core/next","force?","thi.ng.geom.core/compute-face-normals","thi.ng.geom.core/compute-vertex-normals","norms","cljs.core/transient","fnorms","cljs.core/PersistentHashMap","vec__15246","thi.ng.dstruct.core/index!","cljs.core.assoc_BANG_","cljs.core/persistent!","map__15253","this","normals","ntx","p1__15183#","vec__15272","cljs.core.transduce","thi.ng.math.core/+","thi.ng.geom.vector/V3","thi.ng.math.core/normalize","thi.ng.geom.core/into","thi.ng.geom.core/tessellate","thi.ng.geom.utils/tessellate-face","thi.ng.geom.utils/tessellate-with-first","p1__15184#","thi.ng.geom.utils/transform-mesh","thi.ng.math.core/*","p1__15185#","thi.ng.math.core/madd","t","p1__15186#","tx","thi.ng.geom.utils.total_volume"],"sourcesContent":["(ns thi.ng.geom.gmesh\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.matrix :refer [M44]]\n   [thi.ng.geom.meshface :as mf]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [AABB GMesh]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   [clojure.core.reducers :as r]\n   [clojure.set :as set])\n   #?(:clj (:import [thi.ng.geom.types AABB GMesh])))\n\n(defn- add-face*\n  [{:keys [vertices edges faces] :as mesh} [verts]]\n  (let [f (mapv #(get (find vertices %) 0 %) verts)]\n    (if (and (nil? (get faces f))\n             (= (count f) (count (set f))))\n      (let [mf       (thi.ng.geom.meshface.MeshFace. f nil)\n            vertices (->> (d/wrap-seq f [(peek f)] [(first f)])\n                          (partition 3 1)\n                          (reduce\n                           (fn [acc [p c n]]\n                             (d/index-kv acc c {:next n :prev p :f mf}))\n                           vertices))\n            edges    (->> (conj f (first f))\n                          (partition 2 1)\n                          (reduce\n                           (fn [acc pair] (d/index-kv acc (set pair) mf))\n                           edges))]\n        (assoc mesh\n               :vertices vertices\n               :edges edges\n               :faces (conj faces mf)))\n      mesh)))\n\n(defn vertices-planar?\n  [[a b c :as verts]]\n  (or (< (count verts) 4)\n      (let [n (gu/ortho-normal a b c)]\n        (every? #(m/delta= n (gu/ortho-normal %))\n                (partition 3 1 (conj (rest verts) a))))))\n\n(defn face-neighbors-shared-edges\n  [{:keys [edges]} f]\n  (->> (conj f (first f))\n       (partition 2 1)\n       (reduce\n        (fn [acc pair] (into acc (-> pair set edges (disj f))))\n        [])))\n\n(defn vertex-neighbors*\n  [{vertices :vertices} v]\n  (set/union\n   (d/value-set :next vertices v)\n   (d/value-set :prev vertices v)))\n\n(defn vertex-valence*\n  [mesh v] (-> mesh (get :vertices) (get v) count inc))\n\n(defn vertex-faces*\n  [mesh v] (d/value-set :f (get mesh :vertices) v))\n\n(defn remove-vertex*\n  [mesh v]\n  (if (find (get mesh :vertices) v)\n    (reduce g/remove-face mesh (vertex-faces* mesh v))\n    mesh))\n\n(defn replace-vertex*\n  ([mesh v v2]\n   (let [vfaces (vertex-faces* mesh v)]\n     (-> (reduce g/remove-face mesh vfaces)\n         (replace-vertex* v v2 vfaces))))\n  ([mesh v v2 faces]\n   (reduce #(add-face* % (replace {v v2} %2)) mesh faces)))\n\n(defn merge-vertices*\n  [mesh a b]\n  (if ((vertex-neighbors* mesh a) b)\n    (let [fa (vertex-faces* mesh a) fb (vertex-faces* mesh b)\n          ab-isec (set/intersection fa fb)\n          a-xor (set/difference fa ab-isec)\n          b-xor (set/difference fb ab-isec)\n          mp (m/mix a b)]\n      (-> (reduce g/remove-face mesh (set/union ab-isec a-xor b-xor))\n          (replace-vertex* a mp a-xor)\n          (replace-vertex* b mp b-xor)))\n    mesh))\n\n(defn gmesh\n  \"Builds a new 3d mesh data structure and (optionally) populates it with\n  the given items (a seq of existing meshes and/or faces). Faces are defined\n  as vectors of their vertices.\"\n  [] (GMesh. {} #{} {} {} {} #{}))\n\n;; *** Creating a mesh from a lathe\n;;\n;; Revolving a seq of points (usually all in a plane) around an axis\n;; is a classic and very powerful way to construct a\n;; symmetrical/cylindrical 3d mesh. The =lathe-mesh= function does\n;; exactly this (but in a more flexible way): It takes a seq of\n;; =Vec3='s and treats them as lathe to form a mesh. The lathe is\n;; revolved around an axis using a given rotation fn and radial extend\n;; & resolution. The rotation fn must accept two args: a point &\n;; rotation angle. Apart from =rotate-around-axis= all other methods\n;; of the =PRotate3D= protocol (implemented by =Vec3=) satisfy this\n;; condition. To use =rotate-around-axis= as rotation fn, it needs to\n;; be wrapped in a closure with the axis pre-configured.\n;;\n;; The =lathe-mesh= fn first divides the given revolution angle \u03a6\n;; (phi) by the given resolution and creates a seq of rotated point\n;; strips. It then proceeds to form faces between pairs of these\n;; strips. If face points lie on the rotation axis, triangles will be\n;; created or faces skipped entirely to avoid degenerate meshes.\n;; Optionally, each resulting face can also be transformed before\n;; being added to the mesh (e.g. scaled to create gaps or subdivide).\n;; This face transform fn should accept a seq of points and return a\n;; seq of faces (or return nil to skip a face).\n;;\n;; The rotation fn too can be used to not just rotate a point. E.g.\n;; Scaling points based on \u0398 (the rotation angle) post-rotation can\n;; produce very interesting results. The example function below does\n;; this for a lathe defined in the XZ plane and centered around the\n;; Z-axis:\n;;\n;; ```\n;; (fn [p theta]\n;;   (let [s (inc (* (Math/sin (* theta 6)) 0.25))]\n;;     (-> p\n;;         (g/rotate-z theta) ;; first rotate\n;;         (m/* s s 1.0))))   ;; then scale in XY plane only\n;; ```\n;;\n;; Finally, in order to create a fully closed mesh, the revolution\n;; angle \u03a6 must be 2*\u03a0 and the first and last points of the lathe seq\n;; must be located on the rotation axis.\n\n(defn lathe-mesh\n  ([points res phi rot-fn]\n   (lathe-mesh points res phi rot-fn nil))\n  ([points res phi rot-fn face-fn]\n   (let [strips    (mapv\n                    (fn [i]\n                      (let [theta (* i phi)]\n                        (mapv #(let [p (rot-fn % theta)]\n                                 (if (m/delta= p % *eps*)\n                                   % p))\n                              points)))\n                    (butlast (m/norm-range res)))\n         strips    (if (m/delta= phi m/TWO_PI)\n                     (conj strips (first strips))\n                     strips)\n         make-face (fn [[a1 a2] [b1 b2]] ;; TODO add attrib support\n                     (let [f (cond\n                               (< (count (hash-set a1 a2 b1 b2)) 3) nil\n                               (= a1 b1) [b1 b2 a2]\n                               (= a2 b2) [b1 a2 a1]\n                               :default [b1 b2 a2 a1])]\n                       [(if (and f face-fn) (face-fn f) [f])]))]\n     (->> (partition 2 1 strips)\n          (mapcat ;; TODO transduce\n           (fn [[sa sb]]\n             (mapcat make-face\n                     (partition 2 1 sa)\n                     (partition 2 1 sb))))\n          (gu/into-mesh (gmesh) add-face*)))))\n\n(defn saddle\n  [s]\n  (let [sv (vec3 s)]\n    (reduce\n     (fn [m [p flags]]\n       (gu/into-mesh m add-face* (g/as-mesh (AABB. p s) {:flags flags})))\n     (gmesh)\n     [[(vec3) :ewsfb]\n      [(vec3 0 s 0) :wfb]\n      [(vec3 s s 0) :ensfb]\n      [(vec3 0 (* s 2) 0) :ewnfb]])))\n\n(extend-type GMesh\n\n  g/IArea\n  (area\n    [_] (gu/total-area-3d (mf/xf-face-verts _) (get _ :faces)))\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (keys (get _ :vertices))))\n  (width [_] (gu/axis-range 0 (keys (get _ :vertices))))\n  (height [_] (gu/axis-range 1 (keys (get _ :vertices))))\n  (depth [_] (gu/axis-range 2 (keys (get _ :vertices))))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (g/vertices _)))\n\n  g/ICenter\n  (center\n    ([_] (g/center _ (vec3)))\n    ([_ o] (g/translate _ (m/- o (g/centroid _)))))\n  (centroid\n    [_] (gu/centroid (keys (get _ :vertices))))\n\n  g/IFlip\n  (flip [_] (gu/map-mesh (fn [f] [(vec (rseq f))]) _))\n\n  g/IGraph\n  (connected-components\n    [_] [_]) ;; TODO\n  (vertex-neighbors\n    [_ v] (vertex-neighbors* _ v))\n  (vertex-valence\n    [_ v] (vertex-valence* _ v))\n  (remove-vertex\n    [_ v] (remove-vertex* _ v))\n  (replace-vertex\n    [_ v v2] (replace-vertex* _ v v2))\n  (merge-vertices\n    [_ a b] (merge-vertices* _ a b))\n\n  g/IVertexAccess\n  (vertices\n    [_] (keys (get _ :vertices)))\n\n  g/IEdgeAccess\n  (edges\n    [_] (keys (get _ :edges)))\n\n  g/IFaceAccess\n  (faces\n    ([_] (get _ :faces))\n    ([_ opts]\n     (if opts\n       (map #(g/raw % _) (get _ :faces))\n       (get _ :faces))))\n  (add-face\n    [_ face] (add-face* _ face))\n  (vertex-faces\n    [_ v] (vertex-faces* _ v))\n  (remove-face\n    [{:keys [vertices edges faces fnormals vnormals] :as _} f]\n    (if (get faces f)\n      (let [fv (g/vertices f _)]\n        (loop [verts  vertices\n               vnorms vnormals\n               edges  edges\n               fedges (partition 2 1 (conj fv (first fv)))]\n          (if fedges\n            (let [[a b]  (first fedges)\n                  e      #{a b}\n                  efaces (disj (get edges e) f)\n                  edges  (if (seq efaces)\n                           (assoc edges e efaces)\n                           (dissoc edges e))\n                  ve     (filter #(not= (get % :f) f) (get verts a))]\n              (if (seq ve)\n                (recur (assoc verts a (into #{} ve)) vnorms edges (next fedges))\n                (recur (dissoc verts a) (dissoc vnorms a) edges (next fedges))))\n            (assoc _\n                   :vertices verts\n                   :vnormals vnorms\n                   :edges edges\n                   :faces (disj faces f)\n                   :fnormals (dissoc fnormals f)))))\n      _))\n\n  g/INormalAccess\n  (face-normals\n    [_ force?]\n    (if (seq (get _ :fnormals))\n      (get _ :fnormals)\n      (if force? (get (g/compute-face-normals _) :fnormals))))\n  (face-normal\n    [_ f] (get (get _ :fnormals) f))\n  (vertex-normals\n    [_ force?]\n    (if (seq (get _ :vnormals))\n      (get _ :vnormals)\n      (if force? (get (g/compute-vertex-normals _) :vnormals))))\n  (vertex-normal\n    [_ v] (get (get _ :vnormals) v))\n  (compute-face-normals\n    [_]\n    (loop [norms (transient #{}), fnorms (transient (hash-map)), faces (get _ :faces)]\n      (if faces\n        (let [^thi.ng.geom.meshface.MeshFace f (first faces)\n              [norms n] (d/index! norms (gu/ortho-normal (.-vertices f)))]\n          (recur norms (assoc! fnorms f n) (next faces)))\n        (assoc _\n               :normals  (persistent! norms)\n               :fnormals (persistent! fnorms)))))\n  (compute-vertex-normals\n    [_]\n    (let [this (if (seq (get _ :fnormals)) _ (g/compute-face-normals _))\n          {:keys [vertices normals fnormals]} this\n          ntx (map #(get fnormals %))]\n      (loop [norms (transient normals), vnorms (transient (hash-map)), verts (keys vertices)]\n        (if verts\n          (let [v (first verts)\n                [norms n] (->> (d/value-set :f vertices v)\n                               (transduce ntx m/+ v/V3)\n                               (m/normalize)\n                               (d/index! norms))]\n            (recur norms (assoc! vnorms v n) (next verts)))\n          (assoc this\n                 :normals  (persistent! norms)\n                 :vnormals (persistent! vnorms))))))\n\n  g/IGeomContainer\n  (into\n    [_ faces] (gu/into-mesh _ add-face* faces))\n\n  g/IClear\n  (clear*\n    [_] (gmesh))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] _)\n    ([_ opts] (g/into (get opts :mesh) (get _ :faces))))\n\n  g/ITessellate\n  (tessellate\n    ([_]      (g/tessellate _ {}))\n    ([_ opts] (gu/map-mesh (or (get opts :fn) (gu/tessellate-face gu/tessellate-with-first)) _)))\n\n  g/IScale\n  (scale\n    [_ s] (gu/transform-mesh _ add-face* #(m/* % s)))\n  (scale-size\n    [_ s]\n    (let [c (g/centroid _)]\n      (gu/transform-mesh _ add-face* #(m/madd (m/- % c) s c))))\n\n  g/ITranslate\n  (translate\n    [_ t] (gu/transform-mesh _ add-face* #(m/+ % t)))\n\n  g/ITransform\n  (transform\n    [_ tx]\n    (gu/transform-mesh _ add-face* tx))\n\n  g/IVolume\n  (volume\n    [_] (gu/total-volume (mf/xf-face-verts _) (get _ :faces))))\n"]}