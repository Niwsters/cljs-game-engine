{"version":3,"sources":["thi/ng/geom/gl/glmesh.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","p__17720","map__17721","cljs.core/--destructure-map","cljs.core.get","this__5327__auto__","writer__5328__auto__","opt__5329__auto__","cljs.core/-write","thi.ng.geom.gl.glmesh/GLMesh","thi.ng.geom.gl.glmesh/->GLMesh","vertices","fnormals","vnormals","uvs","cols","id","attribs","_","thi.ng.geom.utils/bounding-box","cljs.core/seq","thi.ng.geom.utils/axis-range","thi.ng.geom.utils.bounding_sphere","thi.ng.geom.vector.vec3","o","thi.ng.math.core/-","thi.ng.geom.utils/centroid","num","acc","cljs.core/transient","i","cljs.core.conj_BANG_","thi.ng.geom.vector/Vec3","cljs.core/persistent!","f","thi.ng.geom.gl.glmesh/add-face*","thi.ng.xerror.core.unsupported_BANG_","opts","faces","thi.ng.geom.gl.glmesh/into-glmesh*","thi.ng.geom.utils/into-mesh","G__17708","G__17709","thi.ng.geom.gl.glmesh/gl-mesh","s","G__17678","p1__17662#","G__17679","G__17680","thi.ng.geom.gl.glmesh/transform-vertices","thi.ng.math.core/*!","c","G__17684","p1__17663#","G__17685","G__17686","thi.ng.math.core/madd!","thi.ng.math.core/-!","t","G__17699","p1__17665#","G__17700","G__17701","thi.ng.math.core/+!","tx","G__17672","p1__17666#","G__17673","G__17674","thi.ng.geom.core/transform-vector","G__17722","cljs.core.assoc","or__5043__auto__","thi.ng.geom.gl.webgl.constants/triangles","k","cljs.core._EQ_","thi.ng.xerror.core.illegal_arg_BANG_","v","p__17778","map__17779","thi.ng.geom.gl.glmesh/IndexedGLMesh","thi.ng.geom.gl.glmesh/->IndexedGLMesh","indices","index","fid","thi.ng.geom.gl.glmesh/add-face-indexed*","m","thi.ng.geom.gl.glmesh/into-iglmesh*","G__17774","G__17775","thi.ng.geom.gl.glmesh/indexed-gl-mesh","G__17748","p1__17734#","G__17749","G__17750","G__17752","p1__17735#","G__17753","G__17754","G__17766","p1__17739#","G__17767","G__17768","G__17742","p1__17740#","G__17743","G__17744","G__17780","G__17759","cljs.core/Keyword","cljs.core.keyword","G__17760","G__17761","var_args","G__17786","js/Error","numf","thi.ng.geom.gl.glmesh.gl_mesh","thi.ng.typedarrays.core/float32","G__17788","thi.ng.geom.gl.glmesh.indexed_gl_mesh","thi.ng.typedarrays.core/uint16","p__17800","vec__17801","cljs.core.nth","verts","cljs.core/count","thi.ng.geom.utils/tessellate-face","thi.ng.geom.utils/tessellate-with-first","p1__17797#","cljs.core/run!","idv","iduv","idcol","cljs.core/first","n","thi.ng.geom.utils.ortho_normal","nb","temp__5804__auto__","vn","uv","col","thi.ng.dstruct.streams/into-float-buffer","thi.ng.geom.gl.glmesh/index-vertex*","va","vec__17809","fn","p__17815","vec__17817","p1__17814#","map__17821","vnorm","fnorm","buf","tv","tb","dest","src","map__17828","map__17829","sverts","sfn","svn","scol","suv","sid","dverts","dfn","dvn","dcol","duv","did","sidv","didv","thi.ng.geom.gl.glmesh/build-rindex","dindex","sindex","start","cljs.core/reduce-kv","p__17834","vec__17835","idx","nid","cljs.core.assoc_BANG_","thi.ng.geom.gl.glmesh/merge-index","rindex","cljs.core.into","cljs.core.map","kv","cljs.core/peek","cljs.core/val","cljs.core/key","map__17842","map__17843","vec__17844","sidx","sfid","didx","dfid","did'","fn?","vn?","col?","uv?","temp__5802__auto__","sidcol","siduv"],"sourcesContent":["(ns thi.ng.geom.gl.glmesh\n  #?(:clj\n     (:import\n      [java.nio Buffer FloatBuffer ShortBuffer IntBuffer]))\n  (:require\n   [thi.ng.math.core :as m]\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.gl.core :as gl]\n   [thi.ng.dstruct.streams :as streams]\n   [thi.ng.xerror.core :as err]\n   #?@(:clj\n       [[thi.ng.geom.gl.jogl.buffers :as native]\n        [thi.ng.geom.gl.jogl.constants :as glc]]\n       :cljs\n       [[thi.ng.geom.gl.webgl.constants :as glc]\n        [thi.ng.typedarrays.core :as ta]])))\n\n;; This namespace provides speed optimized, *mutable* mesh\n;; implementations primarily intended for display purposes via OpenGL\n;; / WebGL. Both the `GLMesh` and `IndexedGLMesh` types have the\n;; following features:\n;;\n;; - optional vertex attributes: face normals, vertex normals,\n;;   texture coordinates & colors\n;; - native storage in `java.nio` buffers or JS typed arrays\n;; - automatic triangle tessellation when adding mesh faces\n;; - automatic face normal calculation when adding faces (and face\n;;   normals are enabled)\n;; - customizable attribute names when calling `gl/as-gl-buffer-spec`\n;;   (see further below)\n;;\n;; The `IndexedGLMesh` furthermore does automatic indexing based on\n;; unique vertex values (and their attributes) and therefore reduces\n;; the amount of data needing to be sent and processed by the GPU.\n;;\n;; On the other hand the `GLMesh` builds flattened attribute buffers,\n;; is faster to construct and too allows for bigger meshes, since the\n;; 16bit element index limitation of OpenGL does not apply here.\n;;\n;; Limitations\n;;\n;; - Meshes are not resizable (due to fixed length buffers)\n;; - Max. 65536 unique vertices (OpenGL limitation, `IndexedGLMesh` only)\n;; - No support for vertex normal calculation. V-normals must be pre-assigned\n;; - Currently only partial support for mesh analysis and transformations\n;;\n;; Constructors\n;;\n;; Since the meshes are built on JS typed arrays, the number of faces\n;; must be known at construction time. This doesn't need to (but\n;; generally should) be the exact number, as long as it's at least the\n;; number of faces going to be added. The meshes internally keep track\n;; of the actual elements used, but *do no bounds checking*.\n;;\n;; The second arg given is an optional set of vertex attribute buffer\n;; IDs (see tables under `IGLConvert` further below for details).\n\n(declare gl-mesh indexed-gl-mesh)\n\n(declare add-face* add-face-indexed* into-glmesh* into-iglmesh* transform-vertices)\n\n(deftype GLMesh\n    #?(:clj\n       [^FloatBuffer vertices\n        ^FloatBuffer fnormals\n        ^FloatBuffer vnormals\n        ^FloatBuffer uvs\n        ^FloatBuffer cols\n        ^:unsynchronized-mutable id\n        attribs]\n       :cljs\n       [^js/Float32Array vertices\n        ^js/Float32Array fnormals\n        ^js/Float32Array vnormals\n        ^js/Float32Array uvs\n        ^js/Float32Array cols\n        ^:mutable id\n        attribs])\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (seq (g/vertices _))))\n  (width [_] (gu/axis-range 0 (seq (g/vertices _))))\n  (height [_] (gu/axis-range 1 (seq (g/vertices _))))\n  (depth [_] (gu/axis-range 2 (seq (g/vertices _))))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (seq (g/vertices _))))\n\n  g/ICenter\n  (center\n    [_] (g/center _ (vec3)))\n  (center\n    [_ o] (g/translate _ (m/- o (g/centroid _))))\n  (centroid\n    [_] (gu/centroid (g/vertices _)))\n\n  g/IVertexAccess\n  (vertices\n    [_]\n    (let [num (* id 9)]\n      (loop [acc (transient #{}), i 0]\n        (if (< i num)\n          #?(:clj\n             (recur\n              (conj! acc (vec3 (.get vertices i) (.get vertices (+ i 1)) (.get vertices (+ i 2))))\n              (+ i 3))\n             :cljs\n             (recur\n              (conj! acc (thi.ng.geom.vector.Vec3. (.slice vertices i (+ i 3)) nil nil))\n              (+ i 3)))\n          (persistent! acc)))))\n\n  g/IFaceAccess\n  (add-face\n    [_ f] (add-face* _ f))\n  (faces\n    [_] (err/unsupported!))\n  (faces\n    [_ opts] (err/unsupported!))\n\n  g/IGeomContainer\n  (into\n    [_ faces]\n    (if (instance? GLMesh faces)\n      (into-glmesh* _ faces)\n      (gu/into-mesh _ add-face* faces)))\n\n  g/IClear\n  (clear*\n    [_] (gl-mesh (int (/ #?(:clj (.capacity vertices) :cljs (.-length vertices)) 9)) attribs))\n  (clear!\n    [_] (set! id 0) _)\n\n  g/IScale\n  (scale\n    [_ s] (transform-vertices #(m/*! % s) vertices (* id 9)) _)\n  (scale-size\n    [_ s]\n    (let [c (g/centroid _)]\n      (transform-vertices #(m/madd! (m/-! % c) s c) vertices (* id 9))) _)\n\n  g/ITranslate\n  (translate\n    [_ t] (transform-vertices #(m/+! % t) vertices (* id 9)) _)\n\n  g/ITransform\n  (transform\n    [_ tx] (transform-vertices #(g/transform-vector tx %) vertices (* id 9)) _)\n\n  gl/IGLConvert\n  (as-gl-buffer-spec\n    [_ {:keys [attribs] :as opts}]\n    {:attribs      (cond->    {(get attribs :position :position) {:data vertices :size 3}}\n                     fnormals (assoc (get attribs :fnorm :normal) {:data fnormals :size 3})\n                     vnormals (assoc (get attribs :vnorm :normal) {:data vnormals :size 3})\n                     uvs      (assoc (get attribs :uv :uv) {:data uvs :size 2})\n                     cols     (assoc (get attribs :col :color) {:data cols :size 4}))\n     :num-vertices (or (get opts :num-vertices) (* id 3))\n     :mode         (get opts :mode glc/triangles)})\n\n  g/IMutableProps\n  (get-prop\n    [_ k] (if (= :id k) id (err/illegal-arg! k)))\n  (set-prop!\n    [_ k v] (if (= :id k) (set! id v) (err/illegal-arg! k)) _))\n\n(deftype IndexedGLMesh\n    #?(:clj\n       [^FloatBuffer vertices\n        ^FloatBuffer fnormals\n        ^FloatBuffer vnormals\n        ^FloatBuffer uvs\n        ^FloatBuffer cols\n        ^ShortBuffer indices\n        attribs\n        ^:unsynchronized-mutable index\n        ^:unsynchronized-mutable id\n        ^:unsynchronized-mutable fid]\n       :cljs\n       [^js/Float32Array vertices\n        ^js/Float32Array fnormals\n        ^js/Float32Array vnormals\n        ^js/Float32Array uvs\n        ^js/Float32Array cols\n        ^js/Uint16Array indices\n        attribs\n        ^:mutable index\n        ^:mutable id\n        ^:mutable fid])\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (seq (g/vertices _))))\n  (width [_] (gu/axis-range 0 (seq (g/vertices _))))\n  (height [_] (gu/axis-range 1 (seq (g/vertices _))))\n  (depth [_] (gu/axis-range 2 (seq (g/vertices _))))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (seq (g/vertices _))))\n\n  g/ICenter\n  (center\n    [_] (g/center _ (vec3)))\n  (center\n    [_ o] (g/translate _ (m/- o (g/centroid _))))\n  (centroid\n    [_] (gu/centroid (g/vertices _)))\n\n  ;; The `g/vertices` implementation returns the set of unique\n  ;; vertices in the mesh (without their attributes, only positions).\n\n  g/IVertexAccess\n  (vertices\n    [_]\n    (let [num (* id 3)]\n      (loop [acc (transient #{}), i 0]\n        (if (< i num)\n          #?(:clj\n             (recur\n              (conj! acc (vec3 (.get vertices i) (.get vertices (+ i 1)) (.get vertices (+ i 2))))\n              (+ i 3))\n             :cljs\n             (recur\n              (conj! acc (thi.ng.geom.vector.Vec3. (.slice vertices i (+ i 3)) nil nil))\n              (+ i 3)))\n          (persistent! acc)))))\n\n  g/IFaceAccess\n  (add-face\n    [_ f] (add-face-indexed* _ f))\n  (faces\n    [_] (err/unsupported!))\n  (faces\n    [_ opts] (err/unsupported!))\n\n  g/IGeomContainer\n  (into\n    [_ m]\n    (if (instance? IndexedGLMesh m)\n      (into-iglmesh* _ m)\n      (gu/into-mesh _ add-face-indexed* m)))\n\n  ;; These protocol methods are used internally by `g/into`.\n\n  g/IClear\n  (clear*\n    [_] (indexed-gl-mesh (int (/ #?(:clj (.capacity vertices) :cljs (.-length vertices)) 9)) attribs))\n  (clear!\n    [_] (set! id 0) (set! fid 0) _)\n\n  g/IScale\n  (scale\n    [_ s] (transform-vertices #(m/*! % s) vertices (* id 3)) _)\n  (scale-size\n    [_ s]\n    (let [c (g/centroid _)]\n      (transform-vertices #(m/madd! (m/-! % c) s c) vertices (* id 3))) _)\n\n  g/ITranslate\n  (translate\n    [_ t] (transform-vertices #(m/+! % t) vertices (* id 3)) _)\n\n  g/ITransform\n  (transform\n    [_ tx] (transform-vertices #(g/transform-vector tx %) vertices (* id 3)) _)\n\n  ;; Since a `GLMesh` holds all its data in typed arrays, conversion\n  ;; into a readily usable format for display purposes is reduced to a\n  ;; straight forward re-formatting into GL spec map. By supplying an\n  ;; `:attribs` map in the 2nd arg (options map), all mesh attributes\n  ;; can be renamed in the spec map. The default attribute names are:\n  ;;\n  ;; | *Key*       | *Default value* | *Description*     |\n  ;; |-------------+-----------------+-------------------|\n  ;; | `:position` | `:position`     | vertex positions  |\n  ;; | `:fnorm`    | `:normal`       | face normals      |\n  ;; | `:vnorm`    | `:normal`       | vertex normals    |\n  ;; | `:uv`       | `:uv`           | UV texture coords |\n  ;; | `:col`      | `:color`        | vertex colors     |\n  ;;\n  ;; *Note:* As mentioned above, the `GLMesh` is *not* able to compute\n  ;; vertex normals itself.\n  ;;\n  ;; If a shader requires that an attribute must be renamed in the\n  ;; resulting spec map, call the function like this:\n  ;;\n  ;; rename :position & :uv attribs in result spec:\n  ;; ```\n  ;; (gl/as-gl-buffer-spec mesh {:attribs {:uv :texcoord, :position :pos}})\n  ;; ```\n  ;;\n  ;; Furthermore, the options map also supports the following other\n  ;; keys:\n  ;;\n  ;; - `:mode` - GL draw mode (default: `glc/triangles`)\n  ;; - `:num-vertices` - number of vertices to draw (default: number mesh verts)\n\n  gl/IGLConvert\n  (as-gl-buffer-spec\n    [_ {:keys [attribs] :as opts}]\n    {:attribs      (cond->    {(get attribs :position :position) {:data vertices :size 3}}\n                     fnormals (assoc (get attribs :fnorm :normal) {:data fnormals :size 3})\n                     vnormals (assoc (get attribs :vnorm :normal) {:data vnormals :size 3})\n                     uvs      (assoc (get attribs :uv :uv) {:data uvs :size 2})\n                     cols     (assoc (get attribs :col :color) {:data cols :size 4}))\n     :indices      {:data indices}\n     :num-items    (get opts :num-items fid)\n     :num-vertices id\n     :mode         (get opts :mode glc/triangles)})\n\n  g/IMutableProps\n  (get-prop\n    [_ k]\n    (case (keyword k)\n      :id id\n      :fid fid\n      :index index\n      (err/illegal-arg! k)))\n  (set-prop!\n    [_ k v]\n    (case (keyword k)\n      :id (set! id v)\n      :fid (set! fid v)\n      :index (set! index v)\n      (err/illegal-arg! k))\n    _)\n  (update-prop!\n    [_ k f]\n    (case (keyword k)\n      :id (set! id (f id))\n      :fid (set! fid (f fid))\n      :index (set! index (f index))\n      (err/illegal-arg! k))\n    _))\n\n(defn gl-mesh\n  \"Builds a fixed size mesh with given face count & attribs (a set of\n  #{:fnorm :vnorm :uv :col}). All attributes (incl. vertices) are\n  stored directly in typed array buffers.\"\n  ([numf] (gl-mesh numf nil))\n  ([numf attribs]\n   (GLMesh.\n    (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 9))\n    (if (get attribs :fnorm)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 9)))\n    (if (get attribs :vnorm)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 9)))\n    (if (get attribs :uv)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 6)))\n    (if (get attribs :col)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 12)))\n    0\n    attribs)))\n\n(defn indexed-gl-mesh\n  \"Builds a fixed size, indexed mesh with given face count & optional\n  attribs (a set of #{:fnorm :vnorm :uv :col}). All attributes (incl.\n  vertices) are stored directly in typed array buffers. Internally\n  builds index of unique vertices (position + attribs) and re-uses\n  indices where possible.\"\n  ([numf] (indexed-gl-mesh numf nil))\n  ([numf attribs]\n   (IndexedGLMesh.\n    (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 9))\n    (if (get attribs :fnorm)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 9)))\n    (if (get attribs :vnorm)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 9)))\n    (if (get attribs :uv)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 6)))\n    (if (get attribs :col)\n      (#?(:clj native/float-buffer-direct :cljs ta/float32) (* numf 12)))\n    (#?(:clj native/short-buffer-direct :cljs ta/uint16) (* numf 3))\n    attribs\n    {} 0 0)))\n\n(defn- add-face*\n  [^GLMesh m [verts attribs :as f]]\n  (if (> (count verts) 3)\n    (->> f\n         ((gu/tessellate-face gu/tessellate-with-first))\n         (run! #(add-face* m %)))\n    (let [vertices (.-vertices m)\n          fnormals (.-fnormals m)\n          vnormals (.-vnormals m)\n          uvs      (.-uvs m)\n          cols     (.-cols m)\n          id      #?(:clj (g/get-prop m :id) :cljs (.-id m))\n          idv     (* id 9)\n          iduv    (* id 6)\n          idcol   (* id 12)]\n      #?@(:clj\n          [(->> idv\n                (gl/into-float-buffer-vec3 (first verts) vertices 3)\n                (gl/into-float-buffer-vec3 (nth verts 1) vertices 3)\n                (gl/into-float-buffer-vec3 (nth verts 2) vertices 3))]\n          :cljs\n          [(.set vertices (.-buf ^thi.ng.geom.vector.Vec3 (first verts)) idv)\n           (.set vertices (.-buf ^thi.ng.geom.vector.Vec3 (nth verts 1)) (+ idv 3))\n           (.set vertices (.-buf ^thi.ng.geom.vector.Vec3 (nth verts 2)) (+ idv 6))])\n      (when fnormals\n        #?(:clj\n           (let [n (or (get attribs :fnorm) (gu/ortho-normal verts))]\n             (->> idv\n                  (gl/into-float-buffer-vec3 n fnormals 3)\n                  (gl/into-float-buffer-vec3 n fnormals 3)\n                  (gl/into-float-buffer-vec3 n fnormals 3)))\n           :cljs\n           (let [n  (or (get attribs :fnorm) (gu/ortho-normal verts))\n                 nb (.-buf ^thi.ng.geom.vector.Vec3 n)]\n             (.set fnormals nb idv)\n             (.set fnormals nb (+ idv 3))\n             (.set fnormals nb (+ idv 6)))))\n      (when-let [vn (if vnormals (get attribs :vnorm))]\n        #?@(:clj\n            [(->> idv\n                  (gl/into-float-buffer-vec3 (first vn) vnormals 3)\n                  (gl/into-float-buffer-vec3 (nth vn 1) vnormals 3)\n                  (gl/into-float-buffer-vec3 (nth vn 2) vnormals 3))]\n            :cljs\n            [(.set vnormals (.-buf ^thi.ng.geom.vector.Vec3 (first vn)) idv)\n             (.set vnormals (.-buf ^thi.ng.geom.vector.Vec3 (nth vn 1)) (+ idv 3))\n             (.set vnormals (.-buf ^thi.ng.geom.vector.Vec3 (nth vn 2)) (+ idv 6))]))\n      (when-let [uv (if uvs (get attribs :uv))]\n        #?@(:clj\n            [(->> iduv\n                  (gl/into-float-buffer-vec2 (first uv) uvs 2)\n                  (gl/into-float-buffer-vec2 (nth uv 1) uvs 2)\n                  (gl/into-float-buffer-vec2 (nth uv 2) uvs 2))]\n            :cljs\n            [(.set uvs (.-buf ^thi.ng.geom.vector.Vec2 (first uv)) iduv)\n             (.set uvs (.-buf ^thi.ng.geom.vector.Vec2 (nth uv 1)) (+ iduv 2))\n             (.set uvs (.-buf ^thi.ng.geom.vector.Vec2 (nth uv 2)) (+ iduv 4))]))\n      (when-let [col (if cols (get attribs :col))]\n        (->> idcol\n             (streams/into-float-buffer (first col) cols 4)\n             (streams/into-float-buffer (nth col 1) cols 4)\n             (streams/into-float-buffer (nth col 2) cols 4)))\n      #?(:clj  (g/set-prop! m :id (inc id))\n         :cljs (set! (.-id m) (inc id)))))\n  m)\n\n(defn- index-vertex*\n  [^IndexedGLMesh m va vertices fnormals vnormals cols uvs]\n  (or (get (g/get-prop m :index) va)\n      (let [index #?(:clj (g/get-prop m :index) :cljs (.-index m))\n            id    #?(:clj (g/get-prop m :id) :cljs (.-id m))\n            idv   (* id 3)\n            [v fn vn col uv] va]\n        #?(:clj  (gl/into-float-buffer-vec3 v vertices 3 idv)\n           :cljs (.set vertices (.-buf ^thi.ng.geom.vector.Vec3 v) idv))\n        (if (if fnormals fn)\n          #?(:clj  (gl/into-float-buffer-vec3 fn fnormals 3 idv)\n             :cljs (.set fnormals (.-buf ^thi.ng.geom.vector.Vec3 fn) idv))\n          (if (if vnormals vn)\n            #?(:clj  (gl/into-float-buffer-vec3 vn vnormals 3 idv)\n               :cljs (.set vnormals (.-buf ^thi.ng.geom.vector.Vec3 vn) idv))))\n        (when (if cols col)\n          (streams/into-float-buffer col cols 4 (* id 4)))\n        (when (if uvs uv)\n          #?(:clj  (gl/into-float-buffer-vec2 uv uvs 2 (* id 2))\n             :cljs (.set uvs (.-buf ^thi.ng.geom.vector.Vec2 uv) (* id 2))))\n        #?@(:clj\n            [(g/set-prop! m :index (assoc index va id))\n             (g/set-prop! m :id (inc id))]\n            :cljs\n            [(set! (.-index m) (assoc index va id))\n             (set! (.-id m) (inc id))])\n        id)))\n\n(defn- add-face-indexed*\n  [^IndexedGLMesh m [verts attribs :as f]]\n  (if (> (count verts) 3)\n    (->> f\n         ((gu/tessellate-face gu/tessellate-with-first))\n         (run! #(add-face-indexed* m %)))\n    (let [vertices (.-vertices m)\n          fnormals (.-fnormals m)\n          vnormals (.-vnormals m)\n          uvs      (.-uvs m)\n          cols     (.-cols m)\n          ^ShortBuffer indices (.-indices m)\n          fid      #?(:clj (g/get-prop m :fid) :cljs (.-fid m))\n          {:keys [vnorm uv col]} attribs\n          fnorm (if fnormals (or (get attribs :fnorm) (gu/ortho-normal verts)))]\n      (#?(:clj .put :cljs aset) indices fid\n                                (index-vertex*\n                                 m [(nth verts 0) fnorm (nth vnorm 0 nil) (nth col 0 nil) (nth uv 0 nil)]\n                                 vertices fnormals vnormals cols uvs))\n      (#?(:clj .put :cljs aset) indices (+ fid 1)\n                                (index-vertex*\n                                 m [(nth verts 1) fnorm (nth vnorm 1 nil) (nth col 1 nil) (nth uv 1 nil)]\n                                 vertices fnormals vnormals cols uvs))\n      (#?(:clj .put :cljs aset) indices (+ fid 2)\n                                (index-vertex*\n                                 m [(nth verts 2) fnorm (nth vnorm 2 nil) (nth col 2 nil) (nth uv 2 nil)]\n                                 vertices fnormals vnormals cols uvs))\n      #?(:clj (g/set-prop! m :fid (+ fid 3)) :cljs (set! (.-fid m) (+ fid 3)))))\n  m)\n\n(defn- transform-vertices\n  #?(:clj [f ^FloatBuffer buf num] :cljs [f buf num])\n  (let [tv (vec3 0)\n        ^doubles tb (.-buf ^thi.ng.geom.vector.Vec3 tv)]\n    #?(:clj (.rewind buf))\n    (loop [i 0]\n      (when (< i num)\n        #?@(:clj\n            [(aset tb 0 (.get buf i))\n             (aset tb 1 (.get buf (unchecked-add-int i 1)))\n             (aset tb 2 (.get buf (unchecked-add-int i 2)))\n             (gl/into-float-buffer-vec3 (f tv) buf 3 i)]\n            :cljs\n            [(.set tb (.slice buf i (+ i 3)) 0)\n             (.set buf (.-buf ^thi.ng.geom.vector.Vec3 (f tv)) i)])\n        (recur (+ i 3))))))\n\n(defn- into-glmesh*\n  [^GLMesh dest ^GLMesh src]\n  (let [{sverts :vertices sfn :fnormals svn :vnormals scol :cols suv :uvs sid :id} src\n        {dverts :vertices dfn :fnormals dvn :vnormals dcol :cols duv :uvs did :id} dest\n        sidv   (* sid 9)\n        didv   (* did 9)]\n    #?(:clj  (native/copy-float-buffer dverts sverts didv 0 sidv)\n       :cljs (.set dverts (.slice sverts 0 sidv) didv))\n    (when (if dfn sfn)\n      #?(:clj  (native/copy-float-buffer dfn sfn didv 0 sidv)\n         :cljs (.set dfn (.slice sfn 0 sidv) didv)))\n    (when (if dvn svn)\n      #?(:clj  (native/copy-float-buffer dvn svn didv 0 sidv)\n         :cljs (.set dvn (.slice svn 0 sidv) didv)))\n    (when (if dcol scol)\n      #?(:clj  (native/copy-float-buffer dcol scol (* did 12) 0 (* sid 12))\n         :cljs (.set dcol (.slice scol 0 (* sid 12)) (* did 12))))\n    (when (if duv suv)\n      #?(:clj  (native/copy-float-buffer duv suv (* did 6) 0 (* sid 6))\n         :cljs (.set duv (.slice suv 0 (* sid 6)) (* did 6))))\n    #?(:clj (g/set-prop! dest :id (+ did sid)) :cljs (set! (.-id dest) (+ did sid)))\n    dest))\n\n(defn- build-rindex\n  [dindex sindex start]\n  (reduce-kv\n   (fn [[idx nid :as s] v id]\n     (if (get dindex v) s [(assoc! idx id [nid v]) (inc nid)]))\n   [(transient {}) start]\n   sindex))\n\n(defn- merge-index\n  [dindex rindex]\n  (into dindex (map (fn [kv] [(peek (val kv)) (key kv)])) rindex))\n\n(defn- into-iglmesh*\n  [^IndexedGLMesh dest ^IndexedGLMesh src]\n  (let [{sverts :vertices sfn :fnormals svn :vnormals scol :cols\n         suv :uvs sidx :indices sindex :index sid :id sfid :fid} src\n        {dverts :vertices dfn :fnormals dvn :vnormals dcol :cols\n         duv :uvs didx :indices dindex :index did :id dfid :fid} dest\n        [rindex did'] (build-rindex dindex sindex did)\n        dindex (merge-index dindex (persistent! rindex))\n        sidv   sfid\n        fn?    (if dfn sfn)\n        vn?    (if dvn svn)\n        col?   (if dcol scol)\n        uv?    (if duv suv)]\n    ;; (debug :rindex rindex)\n    ;; (debug :dindex dindex)\n    ;; (debug :dfid-old dfid :didv (* did 3))\n    ;; TODO implement fast path if no verts can be reused\n    (loop [i 0]\n      (when (< i sidv)\n        (if-let [nid (first (get rindex #?(:clj (.get ^ShortBuffer sidx i) :cljs (aget sidx i))))]\n          (let [sid    #?(:clj (.get ^ShortBuffer sidx i) :cljs (aget sidx i))\n                sidv   (* sid 3)\n                didv   (* nid 3)\n                sidcol (* sid 4)\n                siduv  (* sid 2)]\n            ;;(debug :reindex sid :> nid :dfid (+ dfid i) :didv didv)\n            #?(:clj  (.put ^ShortBuffer didx (unchecked-add-int dfid i) nid)\n               :cljs (aset didx (+ dfid i) nid))\n            #?(:clj  (native/copy-float-buffer-vec3 dverts sverts didv sidv)\n               :cljs (.set dverts (.slice sverts sidv (+ sidv 3)) didv))\n            (when fn?\n              #?(:clj  (native/copy-float-buffer-vec3 dfn sfn didv sidv)\n                 :cljs (.set dfn (.slice sfn sidv (+ sidv 3)) didv)))\n            (when vn?\n              #?(:clj  (native/copy-float-buffer-vec3 dvn svn didv sidv)\n                 :cljs (.set dvn (.slice svn sidv (+ sidv 3)) didv)))\n            (when col?\n              #?(:clj  (native/copy-float-buffer-vec4 dcol scol (* nid 4) sidcol)\n                 :cljs (.set dcol (.slice scol sidcol (+ sidcol 4)) (* nid 4))))\n            (when uv?\n              #?(:clj  (native/copy-float-buffer-vec2 duv suv (* nid 2) siduv)\n                 :cljs (.set duv (.slice suv siduv (+ siduv 2)) (* nid 2)))))\n          (do ;;(debug :reuse (aget sidx i) :dfid (+ dfid i))\n            #?(:clj  (.put ^ShortBuffer didx (.get ^ShortBuffer sidx i))\n               :cljs (aset didx (+ dfid i) (aget sidx i)))))\n        (recur (inc i))))\n    #?@(:clj\n        [(g/set-prop! dest :index dindex)\n         (g/set-prop! dest :id did')\n         (g/set-prop! dest :fid (+ dfid sfid))]\n        :cljs\n        [(set! (.-index dest) dindex)\n         (set! (.-id dest) did')\n         (set! (.-fid dest) (+ dfid sfid))])\n    dest))\n"]}