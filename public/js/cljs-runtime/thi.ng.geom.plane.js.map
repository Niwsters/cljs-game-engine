{"version":3,"sources":["thi/ng/geom/plane.cljc"],"mappings":"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","names":["thi.ng.geom.plane/plane","n","w","thi.ng.geom.types/Plane","thi.ng.math.core/normalize","thi.ng.geom.vector.vec3","thi.ng.geom.plane/plane-with-point","p","thi.ng.math.core/dot","var_args","G__15334","thi.ng.geom.plane/plane-from-points","js/Error","p__15343","vec__15344","cljs.core.nth","a","b","c","thi.ng.geom.plane.plane_from_points","thi.ng.geom.utils.ortho_normal","cljs.core/PROTOCOL_SENTINEL","_","thi.ng.math.core/INF+","s","thi.ng.geom.core/width","thi.ng.geom.core/height","thi.ng.geom.core/depth","thi.ng.geom.types/AABB","thi.ng.geom.core/centroid","thi.ng.math.core/delta=","thi.ng.math.core/abs","cljs.core.get","thi.ng.geom.vector/V3X","thi.ng.math.core/*eps*","thi.ng.geom.vector/V3Y","thi.ng.geom.vector/V3Z","thi.ng.geom.types/Sphere","o","thi.ng.math.core/*","thi.ng.math.core.signum","d","thi.ng.geom.core/dist","p__15375","map__15377","cljs.core/--destructure-map","thi.ng.xerror.core.unsupported_BANG_","thi.ng.math.core/-","l","vec__15395","q","cljs.core/map?","thi.ng.geom.utils.intersect/intersect-ray-plane?","ray","vec__15402","dir","thi.ng.geom.utils.intersect/intersect-plane-plane?","thi.ng.geom.utils.intersect/intersect-plane-sphere?","thi.ng.xerror.core.illegal_arg_BANG_","p__15387","map__15388","thi.ng.geom.core/as-mesh","width","height","size","mesh","attribs","or__5043__auto__","h","flip?","thi.ng.geom.core/closest-point","thi.ng.geom.quaternion.quat","thi.ng.geom.quaternion/alignment-quat","face","p1__15359#","cljs.core.mapv","thi.ng.math.core/+","thi.ng.geom.attribs/generate-face-attribs","cljs.core/rseq","thi.ng.geom.core/add-face","thi.ng.geom.basicmesh/basic-mesh","p__15363","map__15364","map__15365","t","m","thi.ng.geom.core/transform-vector"],"sourcesContent":["(ns thi.ng.geom.plane\n  #?(:cljs (:require-macros [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.utils.intersect :as isec]\n   [thi.ng.geom.vector :as v :refer [vec3]]\n   [thi.ng.geom.quaternion :as q]\n   [thi.ng.geom.basicmesh :as bm]\n   [thi.ng.geom.attribs :as attr]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [AABB Plane Sphere]])\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [*eps* INF+]]\n   #?(:clj [thi.ng.math.macros :as mm]))\n   #?(:clj (:import [thi.ng.geom.types AABB Plane Sphere])))\n\n;; A plane in cartesian 3D space can be defined as a point `p` lying\n;; on the plane and normal vector `n` standing perpendicular on the\n;; plane. The latter defines the plane's orientation in space.\n\n(defn plane\n  [n w] (Plane. (m/normalize (vec3 n)) w))\n\n(defn plane-with-point\n  [p n]\n  (let [n (m/normalize (vec3 n))]\n    (Plane. n (- (m/dot n p)))))\n\n(defn plane-from-points\n  ([[a b c]] (plane-from-points a b c))\n  ([a b c]\n   (let [n (gu/ortho-normal a b c)]\n     (Plane. n (- (m/dot n a))))))\n\n(extend-type Plane\n\n  g/IArea\n  (area [_] INF+)\n\n  g/IBounds\n  (bounds\n    [_]\n    (let [s (vec3 (g/width _) (g/height _) (g/depth _))]\n      (AABB. (m/madd s -0.5 (g/centroid _)) s)))\n  (width\n    [_] (if (m/delta= (m/abs (get _ :n)) v/V3X *eps*) 0.0 INF+))\n  (height\n    [_] (if (m/delta= (m/abs (get _ :n)) v/V3Y *eps*) 0.0 INF+))\n  (depth\n    [_] (if (m/delta= (m/abs (get _ :n)) v/V3Z *eps*) 0.0 INF+))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (Sphere. (g/centroid _) INF+))\n\n  g/ICenter\n  (center\n    ([_] (Plane. (get _ :n) 0))\n    ([_ o] (plane-with-point o (get _ :n))))\n  (centroid\n    ([_] (m/* (get _ :n) (- (get _ :w)))))\n\n  g/IClassify\n  (classify-point\n    [_ p]\n    (-> (get _ :n) (m/dot p) (+ (get _ :w)) (m/signum *eps*)))\n\n  g/IDistance\n  (dist\n    [_ p] (+ (m/dot (get _ :n) p) (get _ :w)))\n  (dist-squared\n    [_ p] (let [d (g/dist _ p)] (* d d)))\n\n  g/IExtrude\n  (extrude [_ {}] (err/unsupported!))\n\n  g/IFlip\n  (flip\n    [_] (Plane. (m/- (get _ :n)) (- (get _ :w))))\n\n  g/IIntersect\n  (intersect-line\n    ([_ l]\n     (let [[p q] (if (map? l) (get l :points) l)]\n       (isec/intersect-ray-plane? p (m/- q p) (get _ :n) (get _ :w))))\n    ([_ p q]\n     (isec/intersect-ray-plane? p (m/- q p) (get _ :n) (get _ :w))))\n  (intersect-ray\n    ([_ ray]\n     (let [[p dir] (if (map? ray) [(get ray :p) (get ray :dir)] ray)]\n       (isec/intersect-ray-plane? p dir (get _ :n) (get _ :w))))\n    ([_ p dir]\n     (isec/intersect-ray-plane? p dir (get _ :n) (get _ :w))))\n  (intersect-shape\n    [_ s]\n    (cond\n      (instance? Plane s)\n      (isec/intersect-plane-plane? (get _ :n) (get _ :w) (get s :n) (get s :w))\n      (instance? Sphere s)\n      (isec/intersect-plane-sphere? (get _ :n) (get _ :w) (get s :p) (get s :r))\n      :default (err/illegal-arg! s)))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ {:keys [p width height size mesh attribs] :or {size 1.0}}]\n     (let [w     (* (or width size) 0.5)\n           h     (* (or height size) 0.5)\n           flip? (m/delta= -1.0 (m/dot (get _ :n) v/V3Z))\n           p     (g/closest-point _ (or p (vec3)))\n           q     (if flip?\n                   (q/quat 0 0 0 1)\n                   (q/alignment-quat v/V3Z (get _ :n)))\n           face  (mapv\n                  #(m/+ p (g/transform-vector q %))\n                  [(vec3 (- w) (- h) 0) (vec3 (- w) h 0)\n                   (vec3 w h 0) (vec3 w (- h) 0)])\n           face  (attr/generate-face-attribs (if flip? face (rseq face)) 0 attribs nil)]\n       (g/add-face (or mesh (bm/basic-mesh)) face))))\n\n  g/IProximity\n  (closest-point\n    [{:keys [n] :as _} p]\n    (->> p\n         (m/dot n)\n         (+ (get _ :w))\n         (m/normalize n)\n         (m/- p)))\n\n  g/IScale\n  (scale\n    [_ s] (plane-with-point (m/* (g/centroid _) s) (get _ :n)))\n  (scale-size\n    ([_ s] _))\n\n  g/ITranslate\n  (translate\n    [_ t] (plane-with-point (m/+ (g/centroid _) t) (get _ :n)))\n\n  g/ITransform\n  (transform\n    [_ m] (plane-with-point\n           (g/transform-vector m (g/centroid _))\n           (g/transform-vector m (get _ :n))))\n\n  g/IVolume\n  (volume [_] 0.0))\n"]}