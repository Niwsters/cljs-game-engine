{"version":3,"sources":["thi/ng/geom/meshface.cljc"],"mappings":"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","names":["thi.ng.geom.meshface/xf-face-verts","mesh","p1__13397#","cljs.core.map","cljs.core/first","thi.ng.geom.core/raw","cljs.core/PROTOCOL_SENTINEL","this__5327__auto__","writer__5328__auto__","opt__5329__auto__","cljs.core/-write","thi.ng.geom.meshface/MeshFace","thi.ng.geom.meshface/->MeshFace","vertices","_hash","_","or__5043__auto__","cljs.core/hash","o","cljs.core/compare","thi.ng.geom.meshface/IndexedMeshFace","thi.ng.geom.meshface/->IndexedMeshFace","attribs","idx","p1__13408#","cljs.core.mapv","cljs.core.get","mattr","cljs.core/reduce-kv","acc","k","v","cljs.core.assoc","cljs.core/sequential?","p1__13409#","attr","aval","cljs.core/imul","c"],"sourcesContent":["(ns thi.ng.geom.meshface\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]))\n\n(defn xf-face-verts\n  [mesh] (map #(first (g/raw % mesh))))\n\n(deftype MeshFace\n    [vertices\n     #?@(:clj [^:unsynchronized-mutable _hash]\n         :cljs [^:mutable _hash])]\n\n  g/IVertexAccess\n  (vertices [_] vertices)\n  (vertices [_ _] vertices)\n\n  g/IAttributeAccess\n  (attribs [_ _] nil)\n\n  g/IRawAccess\n  (raw [_ _] [vertices])\n\n  Object\n  (toString [_] (str \\[ vertices \\]))\n  #?@(:clj\n      [(hashCode [_] (or _hash (set! _hash (.hashCode vertices))))\n       (equals\n        [_ o]\n        (and (instance? MeshFace o)\n             (clojure.lang.Util/equals vertices (.-vertices ^MeshFace o))))\n\n       Comparable\n       (compareTo [_ o] (compare vertices (.-vertices ^MeshFace o)))\n\n       clojure.lang.IHashEq\n       (hasheq [_] (.hashCode _))]\n\n      :cljs\n      [IHash\n       (-hash [_] (or _hash (set! _hash (hash vertices))))\n\n       IComparable\n       (-compare [_ o] (compare vertices (.-vertices ^MeshFace o)))]))\n\n(deftype IndexedMeshFace\n    [vertices attribs\n     #?@(:clj [^:unsynchronized-mutable _hash]\n         :cljs [^:mutable _hash])]\n\n  g/IVertexAccess\n  (vertices [_ mesh]\n    (let [idx (-> mesh :vertices :id->v)]\n      (mapv #(get idx %) vertices)))\n\n  g/IAttributeAccess\n  (attribs [_ mesh]\n    (let [mattr (get mesh :attribs)]\n      (reduce-kv\n       (fn [acc k v]\n         (let [idx (-> mattr (get k) (get :id->v))]\n           (assoc acc k (if (sequential? v) (mapv #(get idx %) v) (get idx v)))))\n       {} attribs)))\n  (attribs [_ mesh attr]\n    (let [idx  (-> mesh (get :attribs) (get attr) (get :id->v))\n          aval (attribs attr)]\n      (if (sequential? aval) (mapv idx attribs) (idx aval))))\n\n  g/IRawAccess\n  (raw [_ mesh]\n    [(g/vertices _ mesh) (g/attribs _ mesh)])\n\n  Object\n  (toString [_]\n    (str \\[ vertices \\space attribs \\]))\n  #?@(:clj\n      [(hashCode\n        [_]\n        (or _hash\n            (set! _hash\n                  (unchecked-add-int\n                   (unchecked-multiply-int (.hashCode vertices) 31)\n                   (.hashCode attribs)))))\n       (equals\n        [_ o]\n        (and (instance? IndexedMeshFace o)\n             (clojure.lang.Util/equals vertices (.-vertices ^IndexedMeshFace o))\n             (clojure.lang.Util/equals attribs (.-attribs ^IndexedMeshFace o))))\n\n       Comparable\n       (compareTo\n        [_ o]\n        (let [c (compare vertices (.-vertices ^IndexedMeshFace o))]\n          (if (zero? c)\n            (compare attribs (.-attribs ^IndexedMeshFace o))\n            c)))\n\n       clojure.lang.IHashEq\n       (hasheq [_] (.hashCode _))]\n\n      :cljs\n      [IHash\n       (-hash\n        [_]\n        (or _hash\n            (set! _hash\n                  (-> (hash vertices)\n                      (imul 31)\n                      (+ (hash attribs))\n                      (bit-or 0)))))\n\n       IComparable\n       (-compare\n        [_ o]\n        (let [c (compare vertices (.-vertices ^IndexedMeshFace o))]\n          (if (zero? c)\n            (compare attribs (.-attribs ^IndexedMeshFace o))\n            c)))]))\n"]}