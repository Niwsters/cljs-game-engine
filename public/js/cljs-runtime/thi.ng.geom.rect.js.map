{"version":3,"sources":["thi/ng/geom/rect.cljc"],"mappings":"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","names":["var_args","G__16004","thi.ng.geom.rect/rect","js/Error","thi.ng.geom.types/Rect2","thi.ng.geom.vector.vec2","w","p","q","cljs.core/coll?","vec__16005","cljs.core.nth","thi.ng.math.core/min","thi.ng.math.core/max","thi.ng.math.core/-","x","y","h","p__16016","p__16017","map__16021","cljs.core/--destructure-map","cljs.core.get","vec__16022","map__16025","vec__16026","thi.ng.geom.rect/union","qw","qh","vec__16030","x1","y1","p'","x2","x__5128__auto__","y__5129__auto__","y2","thi.ng.geom.rect/left","r","thi.ng.geom.vector/x","thi.ng.geom.rect/right","thi.ng.geom.rect/bottom","thi.ng.geom.vector/y","thi.ng.geom.rect/bottom-left","thi.ng.geom.rect/top","thi.ng.geom.rect/top-right","thi.ng.math.core/+","cljs.core/PROTOCOL_SENTINEL","_","cljs.core.reduce","cljs.core/*","p__16243","p__16244","map__16245","vec__16246","vec__16249","vec__16252","map__16255","vec__16256","vec__16259","px","py","and__5041__auto__","thi.ng.math.core.in_range_QMARK_","fexpr__16296","fexpr__16299","c","thi.ng.geom.core/centroid","thi.ng.geom.utils.bounding_circle","thi.ng.geom.core/dist","p__16227","map__16228","map__16233","p__16234","map__16236","map__16238","s","thi.ng.math.core/*","o","thi.ng.math.core/madd","cljs.core/+","cljs.core.transduce","p1__16056#","cljs.core.map","thi.ng.math.core.signum","cljs.core.apply","thi.ng.geom.utils/closest-point-coeff","thi.ng.math.core/*eps*","cljs.core/min","thi.ng.geom.core/edges","p__16104","map__16105","depth","scale","offset","opts","thi.ng.geom.core/as-mesh","thi.ng.geom.types/AABB","thi.ng.geom.vector.vec3","thi.ng.geom.core/extrude","thi.ng.geom.core/as-polygon","thi.ng.geom.core/extrude-shell","a","b","d","v","thi.ng.dstruct.core/neighbors","thi.ng.geom.core/vertices","G__16212","fexpr__16211","cljs.core/set","p__16171","map__16173","vec__16174","thi.ng.geom.core/contains-point?","thi.ng.geom.utils.intersect/intersect-line2-edges?","ray","vec__16186","dir","cljs.core/map?","thi.ng.geom.utils.intersect/intersect-ray2-edges?","thi.ng.geom.types/Line2","thi.ng.geom.core/intersect-line","thi.ng.geom.utils.intersect.intersect_rect_rect_QMARK_","thi.ng.geom.types/Circle2","thi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_","thi.ng.xerror.core.unsupported_BANG_","thi.ng.geom.core/add-face","or__5043__auto__","thi.ng.geom.basicmesh/basic-mesh","thi.ng.geom.attribs/generate-face-attribs","cljs.core.mapv","thi.ng.geom.vector/vec3","cljs.core.merge","thi.ng.geom.attribs/uv-default-rect","p__16125","map__16126","map__16127","size","thi.ng.geom.types/Polygon2","cljs.core/first","thi.ng.geom.utils/closest-point-on-segments","t","thi.ng.geom.utils.point_at","cljs.core.conj","thi.ng.geom.core/point-at","thi.ng.math.core.random","fexpr__16090","fexpr__16093","udist","include-last?","thi.ng.geom.utils/sample-uniform","p__16134","p__16135","map__16136","map__16137","map__16138","pa","sa","pb","sb","qa","qb","q'","p1__16057#","cljs.core/every?","p__16070","map__16071","thi.ng.geom.core/subdivide","num","cols","rows","dx","dy","rx","cljs.core.range","ry","iter__5520__auto__","s__16073","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","iterys__5516__auto__","s__16075","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__16077","cljs.core/chunk-buffer","i__16076","cljs.core/-nth","vec__16081","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__16074","cljs.core/chunk-rest","vec__16084","cljs.core/cons","cljs.core/rest","fs__5517__auto__","cljs.core.concat","iter__16072","thi.ng.geom.core/unmap-point","thi.ng.math.core/roundto","p__16289","map__16293","vec__16280","thi.ng.geom.types/Triangle2","tess-fn","thi.ng.geom.utils/tessellate-3","cljs.core.sequence","cljs.core.comp","p1__16058#","cljs.core.mapcat","G__16294","p1__16059#","m","thi.ng.geom.core/rotate","s'","thi.ng.geom.core/transform","cljs.core/chunk-first"],"sourcesContent":["(ns thi.ng.geom.rect\n  #?(:cljs (:require-macros [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.utils.intersect :as isec]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.aabb :as a]\n   [thi.ng.geom.attribs :as attr]\n   [thi.ng.geom.basicmesh :as bm]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [AABB Circle2 Line2 Polygon2 Rect2 Triangle2]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   #?(:clj [thi.ng.math.macros :as mm]))\n  #?(:clj\n     (:import\n      [thi.ng.geom.types AABB Circle2 Line2 Polygon2 Rect2 Triangle2])))\n\n(defn rect\n  ([] (Rect2. (vec2) (vec2 1.0)))\n  ([w] (Rect2. (vec2) (vec2 w)))\n  ([p q]\n   (if (coll? p)\n     (if (coll? q)\n       (let [p (vec2 p) q (vec2 q)\n             [p q] [(m/min p q) (m/max p q)]]\n         (Rect2. p (m/- q p)))\n       (Rect2. (vec2 p) (vec2 q)))\n     (Rect2. (vec2) (vec2 p q))))\n  ([x y w]\n   (if (number? x)\n     (Rect2. (vec2 x y) (vec2 w))\n     (Rect2. (vec2 x) (vec2 y w))))\n  ([x y w h] (Rect2. (vec2 x y) (vec2 w h))))\n\n(defn union\n  [{p :p [w h] :size} {q :p [qw qh] :size}]\n  (let [[x1 y1 :as p'] (m/min p q)\n        x2 (max (+ (p 0) w) (+ (q 0) qw))\n        y2 (max (+ (p 1) h) (+ (q 1) qh))\n        w (- x2 x1)\n        h (- y2 y1)]\n    (Rect2. p' (vec2 w h))))\n\n(defn left [r] (v/x (get r :p)))\n\n(defn right [r] (+ (v/x (get r :p)) (v/x (get r :size))))\n\n(defn bottom [r] (v/y (get r :p)))\n\n(defn bottom-left [r] (get r :p))\n\n(defn top [r] (+ (v/y (get r :p)) (v/y (get r :size))))\n\n(defn top-right [r] (m/+ (get r :p) (get r :size)))\n\n(extend-type Rect2\n\n  g/IArea\n  (area [_] (reduce * (get _ :size)))\n\n  g/IBoundary\n  (contains-point?\n    [{[px py] :p [w h] :size} [x y]]\n    (and (m/in-range? 0.0 w (- x px)) (m/in-range? 0.0 h (- y py))))\n\n  g/IBounds\n  (bounds[_] _)\n  (width  [_] ((get _ :size) 0))\n  (height [_] ((get _ :size) 1))\n  (depth  [_] 0)\n\n  g/IBoundingCircle\n  (bounding-circle\n    [_]\n    (let [c (g/centroid _)]\n      (gu/bounding-circle c (g/dist c (get _ :p)))))\n\n  g/ICenter\n  (center\n    ([{s :size}]\n     (Rect2. (m/* s -0.5) s))\n    ([{s :size} o]\n     (Rect2. (m/madd s -0.5 o) s)))\n  (centroid\n    [_] (m/madd (get _ :size) 0.5 (get _ :p)))\n\n  g/ICircumference\n  (circumference [_] (* 2.0 (reduce + (get _ :size))))\n\n  g/IClassify\n  (classify-point\n    [_ q]\n    (transduce\n     (map #(m/signum (apply gu/closest-point-coeff q %) *eps*))\n     min\n     (g/edges _)))\n\n  ;; Extruding a rectangle along the Z-axis results in a 3D mesh\n  ;; implementation. The `extrude` function supports the following\n  ;; options, given as parameter map:\n  ;;\n  ;; | Key       | Description                             | Default |\n  ;; |-----------+-----------------------------------------+---------|\n  ;; | `:depth`  | extrusion depth along positive Z        |     1.0 |\n  ;; | `:scale`  | scale factor of rect at extrusion depth |     1.0 |\n  ;; | `:offset` | extrusion vector (overrides :depth)     |     nil |\n  ;;\n  ;; The process results in bevelled forms for `:scale` values other\n  ;; than 1.0.\n  ;;\n  ;; *Note:* Due to Clojure's non-circular namespace dependency\n  ;; policy, users must manually `require` the following namespaces\n  ;; before using this method for rects:\n  ;;\n  ;; - `thi.ng.geom.aabb`\n  ;; - `thi.ng.geom.polygon`\n\n  g/IExtrude\n  (extrude\n    [_ {:keys [depth scale offset] :or {depth 1.0 scale 1.0} :as opts}]\n    (if (and (== scale 1.0) (nil? offset))\n      (g/as-mesh\n       (AABB. (vec3 (get _ :p)) (vec3 (get _ :size) depth)) opts)\n      (g/extrude (g/as-polygon _) opts)))\n  (extrude-shell\n    [_ opts] (g/extrude-shell (g/as-polygon _) opts))\n\n  g/IVertexAccess\n  (vertices\n    [_]\n    (let [a (get _ :p)\n          c (m/+ a (get _ :size))]\n      [a (vec2 (c 0) (a 1)) c (vec2 (a 0) (c 1))]))\n\n  g/IEdgeAccess\n  (edges\n    [_] (let [a (get _ :p)\n              c (m/+ a (get _ :size))\n              b (vec2 (c 0) (a 1))\n              d (vec2 (a 0) (c 1))]\n          [[a b] [b c] [c d] [d a]]))\n\n  g/IGraph\n  (vertex-neighbors\n    [_ v] (d/neighbors (vec2 v) (g/vertices _)))\n  (vertex-valence\n    [_ v] (if ((set (g/vertices _)) (vec2 v)) 2 0))\n\n  g/IIntersect\n  (intersect-line\n    [_ {[p q] :points}]\n    (if (and (g/contains-point? _ p) (g/contains-point? _ q))\n      {:type :coincident}\n      (isec/intersect-line2-edges? p q (g/edges _))))\n  (intersect-ray\n    ([_ ray]\n     (let [[p dir] (if (map? ray) [(get ray :p) (get ray :dir)] ray)]\n       (isec/intersect-ray2-edges? p dir (g/edges _))))\n    ([_ p dir]\n     (isec/intersect-ray2-edges? p dir (g/edges _))))\n  (intersect-shape\n    [_ s]\n    (cond\n      (instance? Line2 s) (g/intersect-line _ s)\n      (instance? Rect2 s) (isec/intersect-rect-rect? _ s)\n      (instance? Circle2 s) (isec/intersect-aabb-sphere? _ s)\n      :default (err/unsupported! (str \"can't intersect w/ \" s))))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ opts]\n     (g/add-face\n      (or (get opts :mesh) (bm/basic-mesh))\n      (attr/generate-face-attribs\n       (mapv vec3 (g/vertices _)) 0 (get opts :attribs)\n       (merge {:uv attr/uv-default-rect} opts)))))\n\n  ;; - `map-point` takes a rect and 2D point, returns the point in\n  ;;   normalized UV coords in local rect space, where [0,0] is\n  ;;   equivalent to the rect's min point and [1,1] the point\n  ;;   diagonally opposite. If any of the resulting coordinates is\n  ;;   outside the 0.0 .. 1.0 interval, the orginal point was outside\n  ;;   the rectangle.\n  ;;\n  ;; - `unmap-point` is the inverse operation of `map-point`. It maps\n  ;;   a point in local UV coordinates to its world position.\n\n  g/IPointMap\n  (map-point\n    [{:keys [p size]} q]\n    (vec2\n     (mm/subdiv (v/x q) (v/x p) (v/x size))\n     (mm/subdiv (v/y q) (v/y p) (v/y size))))\n  (unmap-point\n    [_ q] (m/madd q (get _ :size) (get _ :p)))\n\n  g/IPolygonConvert\n  (as-polygon\n    [_] (Polygon2. (g/vertices _)))\n\n  g/IProximity\n  (closest-point\n    [_ p]\n    (first (gu/closest-point-on-segments p (g/edges _))))\n\n  g/ISample\n  (point-at\n    [_ t] (gu/point-at t (conj (g/vertices _) (get _ :p))))\n  (random-point\n    [_] (g/point-at _ (m/random)))\n  (random-point-inside\n    [_] (m/+ (get _ :p) (m/random ((get _ :size) 0)) (m/random ((get _ :size) 1))))\n  (sample-uniform\n    [_ udist include-last?]\n    (gu/sample-uniform udist include-last? (conj (g/vertices _) (get _ :p))))\n\n  ;; TODO same as for `ISetOps` impl for AABB: consider only impls for\n  ;; ops retaining type\n  ;;\n  ;; The implementations for this protocol are only intended to work\n  ;; with other rects and no type checking is done.\n  ;;\n  ;; - `union` returns the union rect of both args\n  ;; - `intersection` (still missing) returns the rect of the intersection\n  ;;   area of both args or `nil` if there's no overlap. Intersection is\n  ;;   defined also for touching rects or if overlap is only a single point\n  ;;   (in which case the size of the resulting rect will be zero)\n  ;; - `difference` (still missing) will return a polygon of the remaining\n  ;;   area after the 2nd rect has been subtracted from the first (or\n  ;;   `nil` in case of no overlap)\n\n  m/ISetOps\n  (union\n    [{pa :p sa :size} {pb :p sb :size}]\n    (let [p (m/min pa pb)]\n      (Rect2. p (m/- (m/max (m/+ pa sa) (m/+ pb sb)) p))))\n  (intersection\n    [_ r]\n    (let [pa (get _ :p) qa (m/+ pa (get _ :size))\n          pb (get r :p) qb (m/+ pb (get r :size))\n          p' (m/max pa pb)\n          q' (m/min qa qb)\n          s  (m/- q' p')]\n      (if (every? #(>= % 0) s)\n        (Rect2. p' s))))\n\n  ;; A rectangle can be subdivided into smaller ones, i.e. to create a\n  ;; list of uniform grid cells. The following options can be given as\n  ;; a 2nd argument map:\n  ;;\n  ;; | Key     | Description                                                    | Default |\n  ;; |---------+----------------------------------------------------------------+---------|\n  ;; | `:num`  | number of cols/rows the rect will be uniformly subdivided into |       2 |\n  ;; | `:cols` | number of times the rect will be subdivided along the X-axis   |       2 |\n  ;; | `:rows` | number of times the rect will be subdivided along the Y-axis   |       2 |\n  ;;\n  ;; When `:num` is given, the resulting rects will retain the aspect\n  ;; ratio of the original rect. If specified, `:cols` and `:rows`\n  ;; will take precedence over `:num`, but the latter will be used as\n  ;; default for missing args. Rects are returned as a lazyseq with\n  ;; top-left to bottom-right ordering and inner sorting along X.\n\n  g/ISubdivide\n  (subdivide\n    ([_] (g/subdivide _ {}))\n    ([_ {:keys [num cols rows] :or {num 2}}]\n     (let [dx (/ 1.0 (or cols num))\n           dy (/ 1.0 (or rows num))\n           rx (range 0.0 1.0 dx)\n           ry (range 0.0 1.0 dy)\n           s (m/* (get _ :size) dx dy)]\n       (for [y ry x rx\n             :let [[px py] (g/unmap-point _ (vec2 x y))\n                   px (m/roundto px *eps*)\n                   py (m/roundto py *eps*)]]\n         (Rect2. (vec2 px py) s)))))\n\n  ;; A rectangle can be tessellated into a number of triangles. When\n  ;; called without options map as 2nd argument, the rect will be\n  ;; split into 2 triangles, each in anti-clockwise orientation: `[tl\n  ;; br tr]` & `[tl bl br]`. When called *with* options, then these\n  ;; are used for a call to `subdivide` first and the function returns\n  ;; a lazyseq of triangles of the subdivided rects.\n\n  g/ITessellate\n  (tessellate\n    ([_]\n     (let [[a b c d] (g/vertices _)]\n       [(Triangle2. [a b c])\n        (Triangle2. [a c d])]))\n    ([_ {tess-fn :fn :or {tess-fn gu/tessellate-3} :as opts}]\n     (->> (g/subdivide _ opts)\n          (sequence\n           (comp\n            (mapcat #(tess-fn (g/vertices %)))\n            (map #(Triangle2. %)))))))\n\n  g/IRotate\n  (rotate\n    [_ m] (g/rotate (g/as-polygon _) m))\n\n  g/IScale\n  (scale\n    [_ s] (Rect2. (m/* (get _ :p) s) (m/* (get _ :size) s)))\n  (scale-size\n    [_ s]\n    (let [s' (m/* (get _ :size) s)]\n      (Rect2.\n       (m/madd s' -0.5 (g/centroid _)) s')))\n\n  g/ITranslate\n  (translate\n    [_ t] (Rect2. (m/+ (get _ :p) t) (get _ :size)))\n\n  g/ITransform\n  (transform\n    [_ m] (g/transform (g/as-polygon _) m))\n\n  g/IVolume\n  (volume [_] 0.0))\n"]}