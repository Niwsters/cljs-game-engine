{"version":3,"sources":["thi/ng/geom/sphere.cljc"],"mappings":"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","names":["var_args","G__17656","thi.ng.geom.sphere/sphere","js/Error","thi.ng.geom.types/Sphere","thi.ng.geom.vector.vec3","r","p","cljs.core/PROTOCOL_SENTINEL","p__17675","map__17676","cljs.core/--destructure-map","cljs.core.get","map__17677","thi.ng.math.core/PI","p__17756","map__17757","map__17758","q","thi.ng.geom.core/dist-squared","_","thi.ng.geom.types/AABB","thi.ng.math.core/-","p__17745","map__17746","map__17747","thi.ng.math.core.signum","thi.ng.math.core/*eps*","p__17731","map__17732","map__17733","ray","vec__17736","cljs.core.nth","rp","dir","cljs.core/map?","thi.ng.geom.utils.intersect.intersect_ray_sphere_QMARK_","s","thi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_","thi.ng.geom.utils.intersect.intersect_sphere_sphere_QMARK_","thi.ng.geom.types/Plane","thi.ng.geom.utils.intersect/intersect-plane-sphere?","thi.ng.xerror.core/type-error!","p__17692","p__17693","map__17694","vec__17695","map__17698","map__17702","vec__17703","thi.ng.geom.core/as-mesh","x","y","z","mesh","res","slices","stacks","attribs","opts","or__5043__auto__","thi.ng.geom.core/*resolution*","rsl","thi.ng.math.core/norm-range","rst","st","thi.ng.typedarrays.core/float32","p1__17667#","cljs.core.map","Math/sin","thi.ng.math.core/TWO_PI","ct","p1__17668#","Math/cos","sp","p1__17669#","cp","p1__17670#","iu","iv","stacks'","fgen","fverts","verts","fid","thi.ng.geom.attribs/generate-face-attribs","cljs.core.merge","p1__17671#","cljs.core.mapv","thi.ng.geom.vector.vec2","cljs.core/first","acc","cljs.core/transient","i","j","ii","jj","p__17724","vec__17728","u","v","cljs.core.conj_BANG_","thi.ng.geom.core/into","thi.ng.geom.basicmesh/basic-mesh","cljs.core/persistent!","p__17682","map__17683","map__17687","thi.ng.math.core/+!","thi.ng.math.core/normalize","thi.ng.math.core/+","thi.ng.geom.vector.randvec3","thi.ng.math.core.random","thi.ng.geom.core/tessellate","theta","thi.ng.geom.core/rotate-z","thi.ng.geom.core/rotate-x","thi.ng.geom.core/rotate-y","axis","thi.ng.geom.core/rotate-around-axis","thi.ng.math.core/*","t","p__17763","map__17764","map__17765"],"sourcesContent":["(ns thi.ng.geom.sphere\n  #?(:cljs\n     (:require-macros [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g :refer [*resolution*]]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.utils.intersect :as isec]\n   [thi.ng.geom.basicmesh :as bm]\n   [thi.ng.geom.attribs :as attr]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [AABB Plane Sphere]])\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [TWO_PI PI *eps*]]\n   #?(:clj [thi.ng.math.macros :as mm]\n      :cljs [thi.ng.typedarrays.core :as ta]))\n  #?(:clj (:import [thi.ng.geom.types AABB Plane Sphere])))\n\n(defn sphere\n  ([] (Sphere. (vec3) 1.0))\n  ([r] (Sphere. (vec3) #?(:clj (double r) :cljs r)))\n  ([p r] (Sphere. (vec3 p) #?(:clj (double r) :cljs r))))\n\n(extend-type Sphere\n\n  g/IArea\n  (area\n    [{r :r}] (* 4.0 PI r r))\n\n  g/IBoundary\n  (contains-point?\n    [{p :p r :r} q] (<= (g/dist-squared p q) (* r r)))\n\n  g/IBounds\n  (bounds\n    [_] (AABB. (m/- (get _ :p) (get _ :r)) (vec3 (* 2 (get _ :r)))))\n  (width  [_] (* 2.0 (get _ :r)))\n  (height [_] (* 2.0 (get _ :r)))\n  (depth  [_] (* 2.0 (get _ :r)))\n\n  g/IBoundingSphere\n  (bounding-sphere [_] _)\n\n  g/ICenter\n  (center\n    ([_] (Sphere. (vec3) (get _ :r)))\n    ([_ p] (Sphere. (vec3 p) (get _ :r))))\n  (centroid [_] (get _ :p))\n\n  g/IClassify\n  (classify-point\n    [{p :p r :r} q]\n    (m/signum (- (* r r) (g/dist-squared p q)) *eps*))\n\n  ;; If ray intersects sphere, the function will return a 2-element\n  ;; vector of distances from the ray's start point to the sphere\n  ;; surface. If either of those distances is negative the\n  ;; intersection point lies in the opposite ray direction. The actual\n  ;; intersection points can be computed by passing the distances into\n  ;; the following form:\n  ;;\n  ;; ```\n  ;; ;; dir = ray direction\n  ;; ;; p = ray start point\n  ;; ;; t = distance\n  ;; (m/madd dir t p)\n  ;; ```\n  ;;\n  ;; If there's no intersection, the function returns `nil`.\n\n  g/IIntersect\n  (intersect-ray\n    [{p :p r :r} ray]\n    (let [[rp dir] (if (map? ray) [(get ray :p) (get ray :dir)] ray)]\n      (isec/intersect-ray-sphere? rp dir p r)))\n  (intersect-shape\n    [_ s]\n    (cond\n      (instance? AABB s)\n      (isec/intersect-aabb-sphere? s _)\n      (instance? Sphere s)\n      (isec/intersect-sphere-sphere? _ s)\n      (instance? Plane s)\n      (isec/intersect-plane-sphere? (get s :n) (get s :w) (get _ :p) (get _ :r))\n      :default (err/type-error! \"Sphere\" s)))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([{[x y z] :p r :r}\n      {:keys [mesh res slices stacks attribs] :as opts}]\n     (let [res     (or res *resolution*)\n           slices  (or slices res)\n           stacks  (or stacks res)\n           rsl     (m/norm-range slices)\n           rst     (m/norm-range stacks)\n           st      (#?(:clj double-array :cljs ta/float32) (map #(Math/sin (* TWO_PI %)) rsl))\n           ct      (#?(:clj double-array :cljs ta/float32) (map #(Math/cos (* TWO_PI %)) rsl))\n           sp      (#?(:clj double-array :cljs ta/float32) (map #(Math/sin (* PI %)) rst))\n           cp      (#?(:clj double-array :cljs ta/float32) (map #(Math/cos (* PI %)) rst))\n           iu      (/ 1.0 slices)\n           iv      (/ 1.0 stacks)\n           stacks' (dec stacks)\n           fgen    (if attribs\n                     (fn [fverts verts fid]\n                       (attr/generate-face-attribs\n                        fverts fid attribs\n                        (merge {:uv (mapv #(vec2 (* iu (first %)) (* iv (nth % 1))) verts)} opts)))\n                     (fn [fverts _ _] [fverts]))]\n       (loop [acc (transient []), fid 0, i 0, j 0]\n         (if (< i slices)\n           (let [ii     (inc i)\n                 jj     (inc j)\n                 verts  (if (pos? j)\n                          (if (< j stacks')\n                            [[i j] [ii j] [ii jj] [i jj]]\n                            [[i j] [ii j] [i jj]])\n                          [[i j] [ii jj] [i jj]])\n                 fverts (mapv\n                         (fn [[u v]]\n                           (vec3\n                            (+ (mm/mul (aget ct u) (aget sp v) r) x)\n                            (mm/madd (aget cp v) r y)\n                            (+ (mm/mul (aget st u) (aget sp v) r) z)))\n                         verts)]\n             (recur (conj! acc (fgen fverts verts fid)) (inc fid) ii j))\n           (if (< j stacks')\n             (recur acc fid 0 (inc j))\n             (g/into (or mesh (bm/basic-mesh)) (persistent! acc))))))))\n\n  g/IProximity\n  (closest-point\n    [{p :p r :r} q]\n    (m/+! (m/normalize (m/- q p) r) p))\n\n  g/ISample\n  (random-point-inside\n    [_]\n    (m/+ (get _ :p) (v/randvec3 (m/random (get _ :r)))))\n  (random-point\n    [_]\n    (m/+ (get _ :p) (v/randvec3 (get _ :r))))\n\n  g/ITessellate\n  (tessellate\n    ([_] (g/tessellate _ {}))\n    ([_ opts] (g/tessellate (g/as-mesh _ opts))))\n\n  g/IRotate\n  (rotate\n    [_ theta] (Sphere. (g/rotate-z (get _ :p) theta) (get _ :r)))\n\n  g/IRotate3D\n  (rotate-x\n    [_ theta] (Sphere. (g/rotate-x (get _ :p) theta) (get _ :r)))\n  (rotate-y\n    [_ theta] (Sphere. (g/rotate-y (get _ :p) theta) (get _ :r)))\n  (rotate-z\n    [_ theta] (Sphere. (g/rotate-z (get _ :p) theta) (get _ :r)))\n  (rotate-around-axis\n    [_ axis theta]\n    (Sphere.\n     (g/rotate-around-axis (get _ :p) axis theta) (get _ :r)))\n\n  ;; FIXME scale with non-uniform values should return Ellipsoid\n\n  g/IScale\n  (scale [_ s] (Sphere. (m/* (get _ :p) s) (* (get _ :r) s)))\n  (scale-size [_ s] (Sphere. (get _ :p) (* (get _ :r) s)))\n\n  g/ITranslate\n  (translate [_ t] (Sphere. (m/+ (get _ :p) t) (get _ :r)))\n\n  g/IVolume\n  (volume [{r :r}] (mm/mul (/ 4.0 3.0) PI r r r)))\n"]}