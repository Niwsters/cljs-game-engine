{"version":3,"sources":["thi/ng/geom/aabb.cljc"],"mappings":"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","names":["var_args","G__15785","thi.ng.geom.aabb/aabb","js/Error","thi.ng.geom.types/AABB","thi.ng.geom.vector.vec3","size","o","sx","sy","sz","thi.ng.geom.aabb/aabb-from-minmax","p","q","thi.ng.math.core/min","thi.ng.math.core/-","thi.ng.math.core/max","cljs.core/PROTOCOL_SENTINEL","p__15810","map__15811","cljs.core/--destructure-map","vec__15812","cljs.core.get","cljs.core.nth","map__15815","vec__15816","w","h","d","_","ext","thi.ng.math.core/*","thi.ng.geom.utils.bounding_sphere","thi.ng.math.core/+","thi.ng.math.core/mag","p__15957","map__15959","vec__15960","map__15964","vec__15965","px","py","pz","s","and__5041__auto__","thi.ng.math.core.in_range_QMARK_","p__15943","map__15944","map__15945","p__15946","map__15947","map__15949","thi.ng.math.core/madd","p__15921","vec__15922","x","y","z","vec__15926","vec__15929","x1","y1","z1","x2","y2","z2","on-plane?","p__15936","vec__15938","minp","maxp","min1","max1","min2","max2","c1","c2","or__5043__auto__","thi.ng.math.core/delta=","thi.ng.math.core/*eps*","cljs.core/some","vec__15901","vec__15904","a","g","vec__15980","b","c","e","f","thi.ng.geom.core/vertices","vec__15918","thi.ng.geom.utils.intersect.intersect_aabb_aabb_QMARK_","thi.ng.geom.types/Sphere","thi.ng.geom.utils.intersect.intersect_aabb_sphere_QMARK_","thi.ng.xerror.core/type-error!","p__15879","map__15880","thi.ng.geom.core/as-mesh","mesh","flags","attribs","vec__15884","vec__15887","north","south","east","west","front","back","thi.ng.dstruct.core/demunge-flags-seq","thi.ng.geom.attribs/generate-face-attribs","cljs.core.eduction","cljs.core.filter","cljs.core/identity","thi.ng.geom.core/into","thi.ng.geom.basicmesh/basic-mesh","p__15862","map__15863","map__15864","p__15823","map__15825","vec__15826","map__15830","vec__15831","thi.ng.math.core/clamp","vec__15848","vec__15851","thi.ng.math.core.random","vec__15854","vec__15857","id","cljs.core._EQ_","pa","pb","qa","qb","p'","q'","s'","p1__15803#","cljs.core/every?","p__15834","map__15835","thi.ng.geom.core/subdivide","num","cols","rows","slices","thi.ng.math.core/div","iter__5520__auto__","s__15837","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5516__auto__","s__15839","s__15841","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__15843","cljs.core/chunk-buffer","i__15842","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__15840","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5517__auto__","cljs.core.concat","iter__15838","iter__15836","cljs.core/butlast","thi.ng.math.core/norm-range","p__15999","map__16000","thi.ng.geom.core/tessellate","thi.ng.geom.utils/tessellate-3","opts","cljs.core/keys","cljs.core.sequence","cljs.core.comp","cljs.core.mapcat","thi.ng.geom.core/faces","theta","thi.ng.geom.core/rotate-z","thi.ng.geom.cuboid.cuboid","thi.ng.geom.core/rotate-x","thi.ng.geom.core/rotate-y","axis","thi.ng.geom.core/rotate-around-axis","t","m","thi.ng.geom.core/transform","p__15988","map__15989","vec__15990","map__15994","vec__15995","cljs.core/chunk-first"],"sourcesContent":["(ns thi.ng.geom.aabb\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.utils.intersect :as isec]\n   [thi.ng.geom.vector :as v :refer [vec3]]\n   [thi.ng.geom.matrix :refer [M44]]\n   [thi.ng.geom.cuboid :as cu]\n   [thi.ng.geom.basicmesh :as bm]\n   [thi.ng.geom.attribs :as attr]\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [AABB Sphere]])\n   #?(:clj [thi.ng.math.macros :as mm]))\n   #?(:clj (:import [thi.ng.geom.types AABB Sphere])))\n\n(defn aabb\n  \"Creates a new axis-aligned bounding box.\"\n  ([] (AABB. (vec3 0.0) (vec3 1.0)))\n  ([size] (AABB. (vec3 0.0) (vec3 size)))\n  ([o size] (AABB. (vec3 o) (vec3 size)))\n  ([sx sy sz] (AABB. (vec3 0.0) (vec3 sx sy sz))))\n\n(defn aabb-from-minmax\n  [p q]\n  (let [p (vec3 p)\n        q (vec3 q)\n        p (m/min p q)]\n    (AABB. p (m/- (m/max p q) p))))\n\n(extend-type AABB\n\n  g/IArea\n  (area [{[w h d] :size}] (* 2.0 (mm/madd w h d h w d)))\n\n  g/IBounds\n  (bounds [_] _)\n  (width  [_] (nth (get _ :size) 0))\n  (height [_] (nth (get _ :size) 1))\n  (depth  [_] (nth (get _ :size) 2))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_]\n    (let [ext (m/* (get _ :size) 0.5)]\n      (gu/bounding-sphere (m/+ (get _ :p) ext) (m/mag ext))))\n\n  g/IBoundary\n  (contains-point?\n    [{[px py pz] :p s :size} q]\n    (and (m/in-range? px (+ px (nth s 0)) (nth q 0))\n         (m/in-range? py (+ py (nth s 1)) (nth q 1))\n         (m/in-range? pz (+ pz (nth s 2)) (nth q 2))))\n  g/ICenter\n  (center\n    ([{size :size}]\n     (AABB. (m/* size -0.5) size))\n    ([{size :size} q]\n     (AABB. (m/madd size -0.5 q) size)))\n  (centroid\n    [_] (m/madd (get _ :size) 0.5 (get _ :p)))\n\n  g/IClassify\n  (classify-point\n    [_ [x y z]]\n    (let [[x1 y1 z1 :as p] (get _ :p)\n          [x2 y2 z2] (m/+ p (get _ :size))\n          on-plane? (fn [[minp maxp p min1 max1 min2 max2 c1 c2]]\n                      (and (or (m/delta= minp p *eps*)\n                               (m/delta= maxp p *eps*))\n                           (m/in-range? min1 max1 c1)\n                           (m/in-range? min2 max2 c2)))]\n      (if (some on-plane?\n                [[x1 x2 x y1 y2 z1 z2 y z]\n                 [y1 y2 y x1 x2 z1 z2 x z]\n                 [z1 z2 z x1 x2 y1 y2 x y]])\n        0\n        (if (and (m/in-range? x1 x2 x)\n                 (m/in-range? y1 y2 y)\n                 (m/in-range? z1 z2 z))\n          1 -1))))\n\n  ;; e +----+ h\n  ;;   |\\   :\\\n  ;;   |f+----+ g\n  ;;   | |  : |\n  ;; a +-|--+d|\n  ;;    \\|   \\|\n  ;;   b +----+ c\n  ;;\n  ;; Faces are always returned in this order: east, west, north, south,\n  ;; front, back - assuming the vertex order given in the diagram.\n\n  g/IVertexAccess\n  (vertices\n    [_]\n    (let [[x1 y1 z1 :as a] (get _ :p)\n          [x2 y2 z2 :as g] (m/+ a (get _ :size))]\n      [a (vec3 x1 y1 z2) (vec3 x2 y1 z2) (vec3 x2 y1 z1)\n       (vec3 x1 y2 z1) (vec3 x1 y2 z2) g (vec3 x2 y2 z1)]))\n\n  g/IEdgeAccess\n  (edges\n    [_]\n    (let [[a b c d e f g h] (g/vertices _)]\n      [[a b] [b c] [c d] [d a] ;; bottom\n       [e f] [f g] [g h] [h e] ;; top\n       [a e] [b f]             ;; left\n       [c g] [d h]             ;; right\n       ]))\n\n  g/IFaceAccess\n  (faces\n    [_]\n    (let [[a b c d e f g h] (g/vertices _)]\n      [[c d h g]\n       [a b f e]\n       [f g h e]\n       [a d c b]\n       [b c g f]\n       [d a e h]]))\n\n  g/IIntersect\n  (intersect-shape\n    [_ s]\n    (cond\n      (instance? AABB s)\n      (isec/intersect-aabb-aabb? _ s)\n      (instance? Sphere s)\n      (isec/intersect-aabb-sphere? _ s)\n      :else (err/type-error! \"AABB\" s)))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ {:keys [mesh flags attribs] :or {flags \"nsewfb\"}}]\n     (let [[a b c d e f g h] (g/vertices _)\n           [north south east west front back] (d/demunge-flags-seq flags \"nsewfb\")]\n       (->> [(if east (attr/generate-face-attribs [c d h g] 0 attribs nil))\n             (if west (attr/generate-face-attribs [a b f e] 1 attribs nil))\n             (if north (attr/generate-face-attribs [f g h e] 2 attribs nil))\n             (if south (attr/generate-face-attribs [a d c b] 3 attribs nil))\n             (if front (attr/generate-face-attribs [b c g f] 4 attribs nil))\n             (if back (attr/generate-face-attribs [d a e h] 5 attribs nil))]\n            (eduction (filter identity))\n            (g/into (or mesh (bm/basic-mesh)))))))\n\n  ;; `map-point` takes an AABB and 3D point, returns the point in normalized UVW\n  ;; coords in local box space, where [0,0,0] is equivalent to the\n  ;; AABB's min point and [1,1,1] the point diagonally opposite. If\n  ;; any of the resulting coordinates is outside the 0.0 .. 1.0\n  ;; interval, the orginal point was outside the box.\n  ;;\n  ;; `unmap-point` is the inverse operation of =map-point=. It maps a\n  ;; point in local UVW coordinates to its world position.\n\n  g/IPointMap\n  (map-point\n    [{:keys [p size]} q]\n    (vec3\n     (mm/subdiv (nth q 0) (nth p 0) (nth size 0))\n     (mm/subdiv (nth q 1) (nth p 1) (nth size 1))\n     (mm/subdiv (nth q 2) (nth p 2) (nth size 2))))\n  (unmap-point\n    [_ q] (m/madd q (get _ :size) (get _ :p)))\n\n  g/IProximity\n  (closest-point\n    [{[px py pz] :p size :size} q]\n    (vec3\n     (m/clamp (nth q 0) px (+ px (nth size 0)))\n     (m/clamp (nth q 1) py (+ py (nth size 1)))\n     (m/clamp (nth q 2) pz (+ pz (nth size 2)))))\n\n  g/ISample\n  (random-point-inside\n    [_]\n    (let [[x1 y1 z1 :as p] (get _ :p)\n          [x2 y2 z2]       (m/+ p (get _ :size))]\n      (vec3 (m/random x1 x2) (m/random y1 y2) (m/random z1 z2))))\n  (random-point\n    [_]\n    (let [[x1 y1 z1 :as p] (get _ :p)\n          [x2 y2 z2]       (m/+ p (get _ :size))\n          id               (int (m/random 6))]\n      (cond\n        (< id 2) (vec3 (if (zero? id) x1 x2) (m/random y1 y2) (m/random z1 z2))\n        (< id 4) (vec3 (m/random x1 x2) (if (= 2 id) y1 y2) (m/random z1 z2))\n        :else    (vec3 (m/random x1 x2) (m/random y1 y2) (if (= 4 id) z1 z2)))))\n\n  ;; Maybe `difference` isn't suitable here and should only implement\n  ;;       ops which retain AABB type. Difference already implemented in\n  ;;       csg ns\n  ;;\n  ;; The implementations for this protocol are only intended to work with\n  ;; other AABBs and no type checking is done.\n  ;;\n  ;; - `union` returns the union box of both args\n  ;; - `intersection` returns the AABB of the intersection volume of both\n  ;;   args or `nil` if there's no overlap. Intersection is defined also\n  ;;   for touching boxes or if overlap is only a single point (in which\n  ;;   case the size of the resulting AABB will be zero)\n  ;; - `difference` (still missing) will return a mesh of the remaining\n  ;;   volume after the 2nd box has been subtracted from the first (or\n  ;;   `nil` in case of no overlap)\n\n  m/ISetOps\n  (union\n    [_ b]\n    (let [pa (get _ :p)\n          pb (get b :p)\n          p  (m/min pa pb)]\n      (AABB.\n       p (m/- (m/max (m/+ pa (get _ :size)) (m/+ pb (get b :size))) p))))\n  (intersection\n    [_ b]\n    (let [pa (get _ :p)\n          qa (m/+ pa (get _ :size))\n          pb (get b :p)\n          qb (m/+ pb (get b :size))\n          p' (m/max pa pb)\n          q' (m/min qa qb)\n          s' (m/- q' p')]\n      (if (every? #(>= % 0.0) s')\n        (AABB. p' s'))))\n\n  ;; An AABB can be subdivided into smaller ones, i.e. to create a seq of\n  ;; uniform grid cells. The following options can be given as a 2nd\n  ;; argument map:\n  ;;\n  ;; | Key       | Description                                                          | Default |\n  ;; |-----------+----------------------------------------------------------------------+---------|\n  ;; | `:num`    | number of cols/rows/slices the box will be uniformly subdivided into |       1 |\n  ;; | `:cols`   | number of times the box will be subdivided along the X-axis          |       1 |\n  ;; | `:rows`   | number of times the box will be subdivided along the Y-axis          |       1 |\n  ;; | `:slices` | number of times the box will be subdivided along the Z-axis          |       1 |\n  ;;\n  ;; When `:num` is given, the resulting AABBs will retain the aspect ratio\n  ;; of the original. If specified, `:cols`, `:rows` and `:slices` will\n  ;; take precedence over `:num`, but the latter will be used as default\n  ;; for missing args. AABBs are returned as a lazyseq starting from `:p`\n  ;; of the original with inner sorting over XYZ.\n\n  g/ISubdivide\n  (subdivide\n    ([_] (g/subdivide _ {}))\n    ([_ {:keys [num cols rows slices] :or {num 1}}]\n     (let [sx   (or cols num)\n           sy   (or rows num)\n           sz   (or slices num)\n           p    (get _ :p)\n           size (get _ :size)\n           s    (m/div size sx sy sz)]\n       (for [z (butlast (m/norm-range sz))\n             y (butlast (m/norm-range sy))\n             x (butlast (m/norm-range sx))]\n         (AABB. (m/madd (vec3 x y z) size p) s)))))\n\n  ;; TODO Only keep faces on the surface of the original box (no inside walls)\n  ;; could use Quad3 face tessellation, but would require moving Q3's\n  ;; subdivision into utils ns to avoid circular dependency.\n\n  g/ITessellate\n  (tessellate\n    ([_] (g/tessellate _ {}))\n    ([_ {f :fn :or {f gu/tessellate-3} :as opts}]\n     (->> (if (some #{:num :cols :rows :slices} (keys opts))\n            (g/subdivide _ opts)\n            [_])\n          (sequence\n           (comp\n            (mapcat g/faces)\n            (mapcat f))))))\n\n  g/IRotate\n  (rotate\n    [_ theta] (g/rotate-z (cu/cuboid (get _ :p) (get _ :size)) theta))\n\n  g/IRotate3D\n  (rotate-x\n    [_ theta] (g/rotate-x (cu/cuboid (get _ :p) (get _ :size)) theta))\n  (rotate-y\n    [_ theta] (g/rotate-y (cu/cuboid (get _ :p) (get _ :size)) theta))\n  (rotate-z\n    [_ theta] (g/rotate-z (cu/cuboid (get _ :p) (get _ :size)) theta))\n  (rotate-around-axis\n    [_ axis theta] (g/rotate-around-axis (cu/cuboid (get _ :p) (get _ :size)) axis theta))\n\n  g/IScale\n  (scale\n    [_ s] (AABB. (m/* (get _ :p) s) (m/* (get _ :size) s)))\n  (scale-size\n    [_ s]\n    (let [s' (m/* (get _ :size) s)]\n      (AABB. (m/madd (m/- s' (get _ :size)) -0.5 (get _ :p)) s')))\n\n  g/ITranslate\n  (translate\n    [_ t] (AABB. (m/+ (get _ :p) t) (get _ :size)))\n\n  g/ITransform\n  (transform\n    [_ m] (g/transform (cu/cuboid (get _ :p) (get _ :size)) m))\n\n  g/IVolume\n  (volume [{[w h d] :size}] (mm/mul w h d)))\n"]}