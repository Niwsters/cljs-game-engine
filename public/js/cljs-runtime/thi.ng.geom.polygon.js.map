{"version":3,"sources":["thi/ng/geom/polygon.cljc"],"mappings":"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","names":["var_args","G__16617","thi.ng.geom.polygon/polygon2","args-arr__5791__auto__","len__5766__auto__","i__5767__auto__","argseq__5792__auto__","cljs.core/IndexedSeq","seq16604","G__16605","cljs.core/first","cljs.core/next","G__16606","self__5751__auto__","points","thi.ng.geom.types/Polygon2","cljs.core.mapv","thi.ng.geom.vector/vec2","p","q","more","cljs.core/cons","thi.ng.geom.polygon/cog","radius","teeth","profile","thi.ng.geom.types/Circle2","thi.ng.geom.vector.vec2","thi.ng.geom.core/vertices","cljs.core/count","v","thi.ng.math.core/*","cljs.core/cycle","thi.ng.geom.polygon/clip-convex*","verts","bounds","cljs.core.conj","bc","thi.ng.geom.core/centroid","ec-pos","e","cljs.core.get","thi.ng.geom.core/intersect-line","cedges","thi.ng.geom.line/line2","thi.ng.geom.core/edges","clipped","ce","sign","thi.ng.geom.core/classify-point","cljs.core.reduce","p__16634","vec__16635","cljs.core.nth","cljs.core._EQ_","thi.ng.dstruct.core.successive_nth","cljs.core/not","thi.ng.math.core/delta=","cljs.core/peek","cljs.core.distinct","cljs.core/butlast","p__16638","vec__16639","thi.ng.geom.polygon/h-segment","px","py","pred","theta","ps","vec__16642","p__16645","vec__16646","state","qx","qy","d","thi.ng.math.core/abs-diff","thi.ng.math.core/HALF_PI","thi.ng.dstruct.core/all-after","thi.ng.geom.polygon/convex-hull*","vec__16651","seq__16652","cljs.core/seq","first__16653","cljs.core.sort_by","rps","cljs.core/reverse","p__16654","vec__16655","t","cljs.core/<=","thi.ng.math.core/THREE_HALVES_PI","cljs.core/>=","thi.ng.math.core/PI","thi.ng.geom.polygon/snip","a","b","c","nv","vec__16659","vec__16662","vec__16665","ax","ay","bx","by","cx","cy","cp","thi.ng.math.core/*eps*","p1__16658#","cljs.core/some","thi.ng.geom.utils/point-in-triangle2?","cljs.core.disj","cljs.core/set","cljs.core.map","cljs.core.subvec","thi.ng.geom.polygon/tessellate*","vec__16671","area","thi.ng.geom.core/area","cljs.core/vec","thi.ng.geom.polygon.polygon2","cljs.core.range","result","cnt","u","w","G__16682","G__16683","G__16684","cljs.core.concat","thi.ng.geom.polygon/inset-corner","prev","curr","next","vec__16691","vec__16694","dx1","dy1","d1","thi.ng.math.core/-","dx2","dy2","d2","thi.ng.math.core/mag","or__5043__auto__","i1","i2","c1","thi.ng.math.core/+","c2","thi.ng.geom.utils.intersect/intersect-line2-line2?","thi.ng.geom.polygon/inset-polygon","p__16703","vec__16704","n","thi.ng.dstruct.core/wrap-seq","p__16707","map__16708","cljs.core/--destructure-map","thi.ng.geom.polygon/smooth","_","amp","base-weight","pc","p__16711","vec__16712","thi.ng.math.core/madd","cljs.core/PROTOCOL_SENTINEL","p__16743","map__16744","map__16748","thi.ng.dstruct.core/rotate-left","p__16752","vec__16753","thi.ng.math.core/cross","thi.ng.geom.utils/bounding-rect","thi.ng.geom.utils/axis-range","thi.ng.geom.utils.bounding_circle","p__16874","map__16875","map__16878","vec__16881","x","y","p__16884","p__16885","vec__16886","vec__16889","vec__16892","in","vx","vy","cljs.core/last","thi.ng.geom.utils.center","o","p__16865","map__16866","map__16867","p__16868","vec__16869","p__16916","map__16917","map__16919","thi.ng.geom.utils/arc-length","s","p__16768","p__16769","map__16771","map__16772","map__16773","mesh","depth","offset","scale","top?","bottom?","tpoints","thi.ng.geom.core/scale-size","off","thi.ng.geom.vector.vec3","points3","thi.ng.geom.vector/vec3","tpoints3","p1__16719#","quad?","thi.ng.geom.core/into","thi.ng.geom.basicmesh/basic-mesh","cljs.core/rseq","p__16774","vec__16775","p__16778","p__16779","vec__16780","vec__16783","a1","b1","a2","b2","p__16786","vec__16787","p__16792","p__16793","map__16794","map__16795","map__16796","inset","wall","nump","p1__16720#","p1__16721#","ipoints","itpoints","ioff","thi.ng.math.core/normalize","itoff","maxp","thi.ng.math.core/clamp","np1","complete?","maybe-loop","cljs.core.take","drop-wrap","cljs.core.drop","quad-strip","flip?","p__16798","p__16799","vec__16801","vec__16804","p1__16722#","ipoints3","p1__16723#","p1__16724#","itpoints3","p1__16725#","outsides","insides","p__16807","vec__16811","p1__16726#","p__16814","vec__16815","f","g","h","p1__16727#","p__16825","vec__16826","p1__16728#","p__16830","vec__16831","p__16897","map__16898","map__16901","thi.ng.dstruct.core/neighbors","fexpr__16858","l","r","p__16844","map__16845","thi.ng.geom.core/as-mesh","attribs","opts","cljs.core.map_indexed","p__16846","vec__16847","i","thi.ng.geom.attribs/generate-face-attribs","thi.ng.geom.core/map-point","thi.ng.geom.utils/closest-point-on-segments","p__16758","map__16759","map__16760","thi.ng.geom.utils.point_at","thi.ng.geom.core/point-at","thi.ng.math.core.random","p__16764","map__16765","map__16766","udist","include-last?","thi.ng.geom.utils/sample-uniform","p1__16732#","thi.ng.geom.core/rotate","p1__16733#","thi.ng.geom.utils.scale_size","p1__16734#","m","p1__16735#","thi.ng.geom.core/transform-vector"],"sourcesContent":["(ns thi.ng.geom.polygon\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.utils.intersect :as isec]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.line :as l]\n   [thi.ng.geom.triangle :as t]\n   [thi.ng.geom.basicmesh :as bm]\n   [thi.ng.geom.attribs :as attr]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [Circle2 Polygon2]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.math.core :as m :refer [PI HALF_PI THREE_HALVES_PI *eps*]])\n  #?(:clj (:import [thi.ng.geom.types Circle2 Polygon2])))\n\n(defn polygon2\n  ([points] (Polygon2. (mapv vec2 points)))\n  ([p q & more] (Polygon2. (mapv vec2 (cons p (cons q more))))))\n\n(defn cog\n  [radius teeth profile]\n  (-> (Circle2. (vec2) radius)\n      (g/vertices (* teeth (count profile)))\n      (->> (mapv (fn [p v] (m/* v p)) (cycle profile))\n           (Polygon2.))))\n\n;; Sutherland-Hodgeman convex clipping\n;; http://en.wikipedia.org/wiki/Sutherland-Hodgman_algorithm\n\n(defn clip-convex*\n  [verts bounds]\n  (let [verts (conj verts (first verts))\n        bc (g/centroid bounds)\n        ec-pos (fn [e p q] (get (g/intersect-line e [p q]) :p))]\n    (loop [cedges (mapv l/line2 (g/edges bounds)) points verts clipped []]\n      (if cedges\n        (let [ce (first cedges)\n              sign (g/classify-point ce bc)\n              clipped (reduce\n                       (fn [clipped [p q]]\n                         (if (= sign (g/classify-point ce p))\n                           (if (= sign (g/classify-point ce q))\n                             (conj clipped q)\n                             (conj clipped (ec-pos ce p q)))\n                           (if (= sign (g/classify-point ce q))\n                             (conj clipped (ec-pos ce p q) q)\n                             clipped)))\n                       [] (d/successive-nth 2 points))\n              clipped (if (and (pos? (count clipped))\n                               (not (m/delta= (first clipped) (peek clipped))))\n                        (conj clipped (first clipped))\n                        clipped)]\n          (recur (next cedges) clipped points))\n        (distinct (butlast points))))))\n\n;; Convex hull\n\n(defn- h-segment\n  [verts [px py :as p] pred theta ps]\n  (let [[q] (reduce\n             (fn [state [qx qy :as q]]\n               (if (pred qy py)\n                 (let [d (m/abs-diff theta (g/heading-xy (vec2 (- qx px) (- qy py))))]\n                   (if (< d (state 1)) [q d] state))\n                 state))\n             [nil HALF_PI] ps)]\n    (if q\n      (recur (conj verts q) q pred theta (d/all-after q ps))\n      verts)))\n\n(defn convex-hull*\n  [points]\n  (let [[p & more :as ps] (sort-by first points)\n        rps (reverse ps)]\n    (butlast\n     (reduce\n      (fn [v [pred t ps]] (h-segment v (peek v) pred t (d/all-after (peek v) ps)))\n      [p] [[<= THREE_HALVES_PI more] [>= 0.0 more]\n           [>= HALF_PI rps] [<= PI rps]]))))\n\n;; Tesselation\n\n(defn- snip\n  [points a b c nv verts]\n  (let [[ax ay] a [bx by] b [cx cy] c\n        cp (- (* (- bx ax) (- cy ay)) (* (- by ay) (- cx ax)))]\n    (when (< m/*eps* cp)\n      (not (some #(gu/point-in-triangle2? % a b c)\n                 (disj (set (map points (subvec verts 0 nv))) a b c)))))) ;; TODO transducer\n\n(defn tessellate*\n  [p]\n  (let [[points area] (if (instance? Polygon2 p)\n                        [(get p :points) (g/area p)]\n                        [(vec p) (g/area (polygon2 p))])\n        nv (count points)\n        verts (vec (if (pos? area) (range nv) (range (dec nv) -1 -1)))]\n    (loop [result [], verts verts, v (dec nv), nv nv, cnt (dec (* 2 nv))]\n      ;; (prn :cnt cnt nv verts)\n      (if (= nv 2)\n        result\n        (when (pos? cnt)\n          (let [u (if (<= nv v) 0 v)\n                v (inc u) v (if (<= nv v) 0 v)\n                w (inc v) w (if (<= nv w) 0 w)\n                a (points (verts u))\n                b (points (verts v))\n                c (points (verts w))]\n            ;; (prn :uvw u v w)\n            (if (snip points a b c nv verts)\n              (let [result (conj result [a b c])\n                    verts (vec (concat (subvec verts 0 v) (subvec verts (inc v))))\n                    nv (dec nv)]\n                (recur result verts v nv (* 2 nv)))\n              (recur result verts v nv (dec cnt)))))))))\n\n;; http://alienryderflex.com/polygon_inset/\n(defn- inset-corner\n  [prev curr next d]\n  (let [[dx1 dy1 :as d1] (m/- curr prev)\n        [dx2 dy2 :as d2] (m/- next curr)\n        d1 (m/mag d1) d2 (m/mag d2)]\n    (if-not (or (m/delta= 0.0 d1) (m/delta= 0.0 d2))\n      (let [i1 (m/* (m/* (vec2 dy1 (- dx1)) (/ d1)) d) ;; TODO avoid double multiply => (/ d d1)\n            i2 (m/* (m/* (vec2 dy2 (- dx2)) (/ d2)) d) ;; TODO ditto => (/ d d2)\n            c1 (m/+ curr i1), c2 (m/+ curr i2)\n            prev (m/+ prev i1), next (m/+ next i2)]\n        (if (m/delta= c1 c2)\n          c1 (get (isec/intersect-line2-line2? prev c1 c2 next) :p)))\n      curr)))\n\n(defn inset-polygon\n  \"For CW polygons, use positive distance to inset or negative to outset.\n  For CCW polygons, use opposite.\"\n  [points d]\n  (mapv\n   (fn [[p c n]] (inset-corner p c n d))\n   (d/successive-nth 3 (d/wrap-seq points [(peek points)] [(first points)]))))\n\n(defn smooth\n  [{points :points :as _} amp base-weight]\n  (let [pc (g/centroid _)]\n    (Polygon2.\n     (mapv\n      (fn [[p c n]]\n        (let [d (m/+ (m/- p c) (m/- n c))\n              d (m/madd (m/- c pc) base-weight d)]\n          (m/madd d amp c)))\n      (d/successive-nth 3 (d/wrap-seq points [(peek points)] [(first points)]))))))\n\n(extend-type Polygon2\n\n  g/IArea\n  (area\n    [{points :points}]\n    (->> points\n         (d/rotate-left 1)\n         (reduce (fn [[a p] v] [(+ a (m/cross p v)) v]) [0.0 (first points)])\n         first\n         (* 0.5)))\n\n  g/IBounds\n  (bounds [_] (gu/bounding-rect (get _ :points)))\n  (width [_] (gu/axis-range 0 (get _ :points)))\n  (height [_] (gu/axis-range 1 (get _ :points)))\n  (depth [_] 0)\n\n  g/IBoundingCircle\n  (bounding-circle\n    [_] (gu/bounding-circle (g/centroid _) (get _ :points)))\n\n  g/IBoundary\n  (contains-point?\n    [{points :points} p]\n    (if (some #{p} points) true\n        (let [[x y] p]\n          (first\n           (reduce\n            (fn [[in [px py]] [vx vy]]\n              (if (and (or (and (< vy y) (>= py y)) (and (< py y) (>= vy y)))\n                       (< (+ vx (* (/ (- y vy) (- py vy)) (- px vx))) x))\n                [(not in) [vx vy]] [in [vx vy]]))\n            [false (last points)] points)))))\n\n  g/ICenter\n  (center\n    ([_] (Polygon2. (gu/center (vec2) (get _ :points))))\n    ([_ o] (Polygon2. (gu/center (g/centroid _) (vec2 o) (get _ :points)))))\n  (centroid\n    [{points :points :as _}]\n    (let [c (->> points\n                 (d/rotate-left 1)\n                 (reduce\n                  (fn [[c p] v] [(m/madd (m/+ p v) (m/cross p v) c) v])\n                  [(vec2) (first points)])\n                 (first))]\n      (m/* c (/ 1.0 (* 6.0 (g/area _))))))\n\n  g/ICircumference\n  (circumference\n    [{p :points}] (gu/arc-length (conj p (first p))))\n\n  g/IClassify\n  (classify-point\n    [_ p] nil)\n\n  g/IClip\n  (clip-with\n    [_ s] (polygon2 (clip-convex* (get _ :points) s)))\n\n  g/IConvexHull\n  (convex-hull\n    [_] (polygon2 (convex-hull* (get _ :points))))\n\n  g/IExtrude\n  (extrude\n    [{points :points :as _}\n     {:keys [mesh depth offset scale top? bottom?]\n      :or {depth 1.0 scale 1.0 top? true bottom? true}}]\n    (let [points   (if (neg? (g/area _)) (reverse points) points)\n          tpoints  (if (= 1.0 scale)\n                     points\n                     (get (g/scale-size (polygon2 points) scale) :points))\n          off      (or offset (vec3 0 0 depth))\n          points3  (mapv vec3 points)\n          tpoints3 (mapv #(m/+ off %) tpoints)\n          quad?    (== 4 (count points))]\n      (g/into\n       (or mesh (bm/basic-mesh))\n       (concat\n        (when bottom?\n          (if quad?\n            [[(rseq (mapv vec3 points))]]\n            (->> points\n                 (tessellate*)\n                 (map (fn [[a b c]] [[(vec3 b) (vec3 a) (vec3 c)]])))))\n        (mapv (fn [[a1 b1] [a2 b2]] [[a1 b1 b2 a2]])\n              (d/successive-nth 2 (conj points3 (points3 0)))\n              (d/successive-nth 2 (conj tpoints3 (tpoints3 0))))\n        (when top?\n          (if quad?\n            [[tpoints3]]\n            (->> tpoints\n                 (tessellate*)\n                 (mapv (fn [[a b c]] [[(m/+ off a) (m/+ off b) (m/+ off c)]])))))))))\n  (extrude-shell\n    [{points :points :as _}\n     {:keys [mesh depth offset inset top? bottom? wall nump]\n      :or {wall 1.0 depth 1.0 inset 0.0 top? false bottom? false}}]\n    (let [points     (if (neg? (g/area _)) (reverse points) points)\n          tpoints    (if (zero? inset) points (inset-polygon points (- inset)))\n          ipoints    (inset-polygon points (- wall))\n          itpoints   (inset-polygon points (- (- inset) wall))\n          off        (or offset (vec3 0 0 depth))\n          ioff       (if bottom? (m/normalize off wall) (vec3))\n          itoff      (if top? (m/normalize off (- (m/mag off) wall)) off)\n          maxp       (inc (count points))\n          quad?      (== 4 (count points))\n          nump       (if nump (m/clamp nump 2 maxp) maxp)\n          np1        (dec nump)\n          complete?  (= nump maxp)\n          maybe-loop #(if complete? (conj % (% 0)) (take nump %))\n          drop-wrap  #(conj (vec (drop np1 %)) (first %))\n          quad-strip (fn [a b flip?]\n                       (map\n                        (fn [[a1 b1] [a2 b2]]\n                          [(if flip? [a1 b1 b2 a2] [a1 a2 b2 b1])])\n                        (d/successive-nth 2 a) (d/successive-nth 2 b)))\n          points3    (mapv #(vec3 %) points)\n          ipoints3   (mapv #(m/+ ioff %) ipoints)\n          tpoints3   (mapv #(m/+ off %) tpoints)\n          itpoints3  (mapv #(m/+ itoff %) itpoints)\n          outsides   (quad-strip (maybe-loop points3) (maybe-loop tpoints3) true)\n          insides    (quad-strip (maybe-loop ipoints3) (maybe-loop itpoints3) false)]\n      (g/into\n       (or mesh (bm/basic-mesh))\n       (concat\n        (if bottom?\n          (concat\n           (if quad?\n             [[(rseq (mapv vec3 points))]]\n             (->> points\n                  (tessellate*)\n                  (map (fn [[a b c]] [[(vec3 b) (vec3 a) (vec3 c)]]))))\n           (if quad?\n             [(mapv #(m/+ ioff %) ipoints)]\n             (->> ipoints\n                  (tessellate*)\n                  (map (fn [[a b c]] [[(m/+ ioff a) (m/+ ioff b) (m/+ ioff c)]]))))\n           (when-not complete?\n             (quad-strip (drop-wrap points3) (drop-wrap ipoints3) true)))\n          (quad-strip (maybe-loop points3) (maybe-loop ipoints3) false))\n        outsides\n        insides\n        (when-not complete?\n          (let [a (points3 0) b (ipoints3 0) c (itpoints3 0) d (tpoints3 0)\n                e (points3 np1) f (ipoints3 np1) g (itpoints3 np1) h (tpoints3 np1)]\n            [[[d c b a]] [[e f g h]]]))\n        (if top?\n          (concat\n           (if quad?\n             [[(mapv #(m/+ off %) tpoints)]]\n             (->> tpoints\n                  (tessellate*)\n                  (map (fn [[a b c]] [[(m/+ off a) (m/+ off b) (m/+ off c)]]))))\n           (if quad?\n             [[(rseq (mapv #(m/+ itoff %) itpoints))]]\n             (->> itpoints\n                  (tessellate*)\n                  (map (fn [[a b c]] [[(m/+ itoff b) (m/+ itoff a) (m/+ itoff c)]]))))\n           (when-not complete? (quad-strip (drop-wrap tpoints3) (drop-wrap itpoints3) false)))\n          (quad-strip (maybe-loop tpoints3) (maybe-loop itpoints3) true))))))\n\n  g/IFlip\n  (flip\n    [_] (Polygon2. (vec (rseq (:points _)))))\n\n  g/IVertexAccess\n  (vertices\n    [_] (get _ :points))\n\n  g/IEdgeAccess\n  (edges\n    [{points :points}]\n    (d/successive-nth 2 (conj points (first points))))\n\n  g/IGraph\n  (vertex-neighbors\n    [_ v] (d/neighbors v (g/vertices _)))\n  (vertex-valence\n    [_ v] (if ((set (g/vertices _)) v) 2 0))\n\n  g/IIntersect\n  (intersect-line\n    [_ l])\n  (intersect-ray\n    [_ r])\n  (intersect-shape\n    [_ s])\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ {:keys [attribs] :as opts}]\n     (let [bounds (gu/bounding-rect (get _ :points))]\n       (->> (tessellate* _)\n            (map-indexed\n             (fn [i [a b c]]\n               (attr/generate-face-attribs\n                [(vec3 a) (vec3 b) (vec3 c)] i attribs\n                {:uv [(g/map-point bounds a) (g/map-point bounds b) (g/map-point bounds c)]})))\n            (g/into (or (get opts :mesh) (bm/basic-mesh)))))))\n\n  g/IPolygonConvert\n  (as-polygon [_] _)\n\n  g/IProximity\n  (closest-point\n    [_ p]\n    (first (gu/closest-point-on-segments p (g/edges _))))\n\n  g/ISample\n  (point-at\n    [{points :points} t] (gu/point-at t (conj points (first points))))\n  (random-point\n    [_] (g/point-at _ (m/random)))\n  (random-point-inside [_] nil) ; TODO\n  (sample-uniform\n    [{points :points} udist include-last?]\n    (gu/sample-uniform udist include-last? (conj points (first points))))\n\n  g/ITessellate\n  (tessellate\n    [_] (tessellate* _))\n\n  g/IRotate\n  (rotate\n    [_ theta] (Polygon2. (mapv #(g/rotate % theta) (get _ :points))))\n\n  g/IScale\n  (scale\n    [_ s] (Polygon2. (mapv #(m/* % s) (get _ :points))))\n  (scale-size\n    [_ s] (Polygon2. (gu/scale-size s (get _ :points))))\n\n  g/ITranslate\n  (translate\n    [_ t] (Polygon2. (mapv #(m/+ % t) (get _ :points))))\n\n  g/ITransform\n  (transform\n    [_ m] (Polygon2. (mapv #(g/transform-vector m %) (get _ :points))))\n\n  g/IVolume\n  (volume [_] 0.0))\n"]}