{"version":3,"sources":["thi/ng/geom/basicmesh.cljc"],"mappings":"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","names":["p__15057","vec__15058","cljs.core.nth","thi.ng.geom.basicmesh/add-face*","mesh","fverts","thi.ng.geom.types/BasicMesh","cljs.core.into","cljs.core.get","cljs.core.conj","thi.ng.geom.meshface/MeshFace","thi.ng.geom.basicmesh/basic-mesh","cljs.core/PROTOCOL_SENTINEL","_","thi.ng.geom.utils.total_area_3d","thi.ng.geom.meshface/xf-face-verts","thi.ng.geom.utils/bounding-box","cljs.core/seq","thi.ng.geom.utils/axis-range","thi.ng.geom.utils.bounding_sphere","thi.ng.geom.core/centroid","thi.ng.geom.core/center","thi.ng.geom.vector.vec3","o","thi.ng.geom.core/translate","thi.ng.math.core/-","thi.ng.geom.utils/centroid","thi.ng.geom.utils/map-mesh","f","cljs.core/vec","cljs.core/rseq","cljs.core.comp","p1__15065#","cljs.core.map","thi.ng.geom.core/vertices","p1__15067#","cljs.core.mapcat","thi.ng.dstruct.core.successive_nth","cljs.core/first","cljs.core/set","opts","p1__15071#","thi.ng.geom.core/raw","face","v","cljs.core.sequence","p1__15074#","p1__15075#","cljs.core.filter","thi.ng.dstruct.core/index-of","thi.ng.xerror.core.unsupported_BANG_","force?","thi.ng.geom.core/compute-face-normals","fnorms","cljs.core/transient","faces","cljs.core.assoc_BANG_","thi.ng.geom.utils.ortho_normal","cljs.core/next","cljs.core.assoc","cljs.core/persistent!","thi.ng.geom.utils/into-mesh","thi.ng.geom.core/into","thi.ng.geom.core/tessellate","or__5043__auto__","thi.ng.geom.utils/tessellate-face","thi.ng.geom.utils/tessellate-with-first","s","p1__15077#","thi.ng.geom.utils/transform-mesh","thi.ng.math.core/*","c","p1__15078#","thi.ng.math.core/madd","t","p1__15079#","thi.ng.math.core/+","m","thi.ng.geom.utils.total_volume"],"sourcesContent":["(ns thi.ng.geom.basicmesh\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.vector :as v :refer [vec2 vec3]]\n   [thi.ng.geom.matrix :refer [M44]]\n   [thi.ng.geom.meshface :as mf]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [BasicMesh]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   [thi.ng.xerror.core :as err]\n   [clojure.core.reducers :as r])\n   #?(:clj (:import [thi.ng.geom.types BasicMesh])))\n\n(declare basic-mesh)\n\n(defn- add-face*\n  [mesh [fverts]]\n  (BasicMesh.\n   (into (get mesh :vertices) fverts)\n   (conj (get mesh :faces) (thi.ng.geom.meshface.MeshFace. fverts nil))\n   (get mesh :fnormals)))\n\n(defn basic-mesh\n  \"Builds a new 3d mesh data structure and (optionally) populates it with\n  the given items (a seq of existing meshes and/or faces). Faces are defined\n  as vectors of their vertices.\"\n  [] (BasicMesh. #{} #{} {}))\n\n(extend-type BasicMesh\n\n  g/IArea\n  (area\n    [_] (gu/total-area-3d (mf/xf-face-verts _) (get _ :faces)))\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (seq (get _ :vertices))))\n  (width [_]  (gu/axis-range 0 (get _ :vertices)))\n  (height [_] (gu/axis-range 1 (get _ :vertices)))\n  (depth [_]  (gu/axis-range 2 (get _ :vertices)))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (get _ :vertices)))\n\n  g/ICenter\n  (center\n    ([_]   (g/center _ (vec3)))\n    ([_ o] (g/translate _ (m/- o (g/centroid _)))))\n  (centroid\n    [_]    (gu/centroid (seq (get _ :vertices))))\n\n  g/IFlip\n  (flip [_] (gu/map-mesh (fn [f] [(vec (rseq f))]) _))\n\n  g/IVertexAccess\n  (vertices\n    [_] (get _ :vertices))\n\n  g/IEdgeAccess\n  (edges\n    [_]\n    (into\n     #{}\n     (comp\n      (map #(g/vertices % _))\n      (mapcat #(d/successive-nth 2 (conj % (first %))))\n      (map set))\n     (get _ :faces)))\n\n  g/IFaceAccess\n  (faces\n    ([_] (get _ :faces))\n    ([_ opts]\n     (if opts\n       (map #(g/raw % _) (get _ :faces))\n       (get _ :faces))))\n  (add-face\n    [_ face] (add-face* _ face))\n  (vertex-faces\n    [_ v]\n    (sequence\n     (comp\n      (map #(g/vertices % _))\n      (filter\n       #(pos? #?(:clj (.indexOf ^clojure.lang.PersistentVector % v)\n                 :cljs (d/index-of % v))))\n      (get _ :faces))))\n  (remove-face\n    [_ f]\n    (err/unsupported!)) ;; TODO implement\n\n  g/INormalAccess\n  (face-normals\n    [_ force?] (if (seq (get _ :fnormals)) (get _ :fnormals) (if force? (get (g/compute-face-normals _) :fnormals))))\n  (face-normal\n    [_ f] (get (get _ :fnormals) f))\n  (vertex-normals\n    [_ force?] (if force? (err/unsupported!)))\n  (vertex-normal\n    [_ v] (err/unsupported!))\n  (compute-face-normals\n    [_]\n    (loop [fnorms (transient {}), faces (get _ :faces)]\n      (if faces\n        (let [f (first faces)]\n          (recur (assoc! fnorms f (gu/ortho-normal (g/vertices f _))) (next faces)))\n        (assoc _ :fnormals (persistent! fnorms)))))\n  (compute-vertex-normals\n    [_] (err/unsupported!))\n\n  g/IGeomContainer\n  (into\n    [_ faces] (gu/into-mesh _ add-face* faces))\n\n  g/IClear\n  (clear*\n    [_] (basic-mesh))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] _)\n    ([_ opts] (g/into (get opts :mesh) (get _ :faces))))\n\n  g/ITessellate\n  (tessellate\n    ([_]      (g/tessellate _ {}))\n    ([_ opts] (gu/map-mesh (or (get opts :fn) (gu/tessellate-face gu/tessellate-with-first)) _)))\n\n  g/IScale\n  (scale\n    [_ s] (gu/transform-mesh _ add-face* #(m/* % s)))\n  (scale-size\n    [_ s]\n    (let [c (g/centroid _)]\n      (gu/transform-mesh _ add-face* #(m/madd (m/- % c) s c))))\n\n  g/ITranslate\n  (translate\n    [_ t] (gu/transform-mesh _ add-face* #(m/+ % t)))\n\n  g/ITransform\n  (transform\n    [_ m]\n    (gu/transform-mesh _ add-face* m))\n\n  g/IVolume\n  (volume\n    [_] (gu/total-volume (mf/xf-face-verts _) (get _ :faces))))\n"]}