{"version":3,"sources":["thi/ng/geom/cuboid.cljc"],"mappings":"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","names":["var_args","G__15644","thi.ng.geom.cuboid/cuboid","js/Error","thi.ng.geom.cuboid.cuboid","a","b","c","d","e","f","g","h","thi.ng.geom.types/Cuboid","cljs.core.mapv","thi.ng.geom.vector/vec3","x","thi.ng.geom.vector.vec3","cljs.core/map?","cljs.core.get","cljs.core/sequential?","cljs.core/count","thi.ng.xerror.core.illegal_arg_BANG_","o","size","vec__15648","cljs.core.nth","vec__15651","x1","y1","z1","x2","y2","z2","thi.ng.math.core/+","cljs.core/PROTOCOL_SENTINEL","_","cljs.core.transduce","p1__15656#","cljs.core.map","cljs.core.apply","thi.ng.geom.utils/tri-area3","cljs.core/+","thi.ng.geom.core/tessellate","thi.ng.geom.utils/bounding-box","thi.ng.geom.utils/axis-range","thi.ng.geom.utils.bounding_sphere","thi.ng.geom.core/centroid","p","thi.ng.geom.core/classify-point","thi.ng.geom.utils.center","thi.ng.geom.utils/centroid","cljs.core.reduce","c'","thi.ng.geom.plane.plane_from_points","cljs.core/reduced","x__5128__auto__","y__5129__auto__","thi.ng.geom.core/faces","vec__15774","vec__15771","s","thi.ng.xerror.core.unsupported_BANG_","p__15763","map__15764","cljs.core/--destructure-map","thi.ng.geom.core/as-mesh","mesh","flags","attribs","vec__15765","vec__15768","thi.ng.geom.core/vertices","north","south","east","west","front","back","thi.ng.dstruct.core/demunge-flags-seq","thi.ng.geom.attribs/generate-face-attribs","cljs.core.sequence","cljs.core.filter","cljs.core/identity","thi.ng.geom.core/into","or__5043__auto__","thi.ng.geom.basicmesh/basic-mesh","thi.ng.geom.utils/map-trilinear","acc","p'","thi.ng.geom.core/closest-point","thi.ng.geom.core/dist-squared","cljs.core/first","p__15730","map__15731","map__15734","vec__15738","vec__15741","thi.ng.math.core.random","p__15751","map__15752","map__15756","vec__15757","vec__15760","id","cljs.core._EQ_","p__15668","p__15669","map__15670","map__15671","map__15684","thi.ng.geom.core/subdivide","points","num","cols","rows","slices","ru","cljs.core.partition","thi.ng.math.core/norm-range","rv","rw","map-p","p1__15657#","thi.ng.math.core/roundto","thi.ng.math.core/*eps*","iter__5520__auto__","s__15691","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","vec__15700","iterys__5516__auto__","s__15693","vec__15706","s__15695","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","b__15697","cljs.core/chunk-buffer","i__15696","vec__15713","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__15694","cljs.core/chunk-rest","vec__15719","cljs.core/cons","cljs.core/rest","fs__5517__auto__","cljs.core.concat","iter__15692","iter__15690","w1","w2","v1","v2","u1","u2","p__15781","map__15782","thi.ng.geom.utils/tessellate-3","opts","cljs.core/some","cljs.core/keys","cljs.core.comp","cljs.core.mapcat","theta","thi.ng.geom.core/rotate-z","p1__15658#","thi.ng.geom.core/rotate-x","p1__15660#","thi.ng.geom.core/rotate-y","p1__15661#","axis","p1__15662#","thi.ng.geom.core/rotate-around-axis","p1__15663#","thi.ng.math.core/*","thi.ng.geom.utils.scale_size","t","p1__15665#","m","p1__15666#","thi.ng.geom.core/transform-vector","vec__15777","p1__15667#","G__15780","thi.ng.geom.tetrahedron.tetrahedron","thi.ng.geom.core/volume","thi.ng.math.core/abs*","cljs.core/chunk-first"],"sourcesContent":["(ns thi.ng.geom.cuboid\n  #?(:cljs\n     (:require-macros\n      [thi.ng.math.macros :as mm]))\n  (:require\n   [thi.ng.geom.core :as g]\n   [thi.ng.geom.utils :as gu]\n   [thi.ng.geom.vector :as v :refer [vec3]]\n   [thi.ng.geom.attribs :as attr]\n   [thi.ng.geom.basicmesh :as bm]\n   [thi.ng.geom.plane :as p]\n   [thi.ng.geom.tetrahedron :as tetra]\n   #?(:clj [thi.ng.geom.types] :cljs [thi.ng.geom.types :refer [Cuboid]])\n   [thi.ng.dstruct.core :as d]\n   [thi.ng.xerror.core :as err]\n   [thi.ng.math.core :as m :refer [*eps*]]\n   #?(:clj [thi.ng.math.macros :as mm]))\n  #?(:clj (:import [thi.ng.geom.types Cuboid])))\n\n;; Unlike an axis-aligned bounding box (AABB), this type specifies a\n;; freeform box/cuboid, defined by its 8 vertices and which can be\n;; freely rotated & transformed. An AABB can be considered a logical\n;; subtype of this type and an AABB can be converted into a cuboid via\n;; the `cuboid` constructor function defined in this namespace.\n\n(defn cuboid\n  ([] (cuboid 1.0))\n  ([a b c d e f g h]\n   (Cuboid. (mapv vec3 [a b c d e f g h])))\n  ([x]\n   (cond\n     (number? x)     (cuboid (vec3) x)\n     (map? x)        (cuboid (get x :p) (get x :size))\n     (sequential? x) (if (== 8 (count x))\n                       (Cuboid. (mapv vec3 x))\n                       (err/illegal-arg!\n                        \"Wrong number of points, expected 8 but got\"\n                        (count x)))\n     :else           (err/illegal-arg! x)))\n  ([o size]\n   (let [[x1 y1 z1 :as a] (vec3 o)\n         [x2 y2 z2 :as g] (m/+ a size)\n         b (vec3 x1 y1 z2) c (vec3 x2 y1 z2)\n         d (vec3 x2 y1 z1) e (vec3 x1 y2 z1)\n         f (vec3 x1 y2 z2) h (vec3 x2 y2 z1)]\n     (Cuboid. [a b c d e f g h]))))\n\n(extend-type Cuboid\n\n  g/IArea\n  (area\n    [_] (transduce (map #(apply gu/tri-area3 %)) + (g/tessellate _)))\n\n  g/IBounds\n  (bounds [_] (gu/bounding-box (get _ :points)))\n  (width [_] (gu/axis-range 0 (get _ :points)))\n  (height [_] (gu/axis-range 1 (get _ :points)))\n  (depth [_] (gu/axis-range 2 (get _ :points)))\n\n  g/IBoundingSphere\n  (bounding-sphere\n    [_] (gu/bounding-sphere (g/centroid _) (get _ :points)))\n\n  g/IBoundary\n  (contains-point?\n    [_ p] (>= (g/classify-point _ p) 0))\n\n  g/ICenter\n  (center\n    ([_] (Cuboid. (gu/center (vec3) (get _ :points))))\n    ([_ o] (Cuboid. (gu/center (g/centroid _) (vec3 o) (get _ :points)))))\n  (centroid\n    [_] (gu/centroid (get _ :points)))\n\n  ;; In order to determine if a given point lies within or outside the\n  ;; cuboid, we compute the classifier for each of the 6 sides /\n  ;; facets / plane and use their maximum as compound result. Since\n  ;; the faces are all pointing outwards (away from the center),\n  ;; `classify-point` for each face will return a positive value if\n  ;; the point is in the positive half space of that plane. This\n  ;; means, in order for a point to be inside the cuboid, all plane\n  ;; classifiers need to be negative (or zero if the point is on the\n  ;; surface. The search is terminated early as soon as one facet\n  ;; produces a positive classifier.\n  ;;\n  ;; *Note:* Because of its reliance on plane normals, this\n  ;; implementation only works for fully planar cuboids.\n\n  g/IClassify\n  (classify-point\n    [_ p]\n    (- (reduce\n        (fn [c f]\n          (let [c' (g/classify-point (p/plane-from-points f) p)]\n            (if (pos? c') (reduced c') (max c c'))))\n        -1.0 (g/faces _))))\n\n  ;; e +----+ h\n  ;;   |\\   :\\\n  ;;   |f+----+ g\n  ;;   | |  : |\n  ;; a +-|--+d|\n  ;;    \\|   \\|\n  ;;   b +----+ c\n  ;;\n  ;; Faces are always returned in this order: east, west, north,\n  ;; south, front, back - assuming the vertex order given in the\n  ;; diagram.\n\n  g/IVertexAccess\n  (vertices\n    [_] (get _ :points))\n\n  g/IEdgeAccess\n  (edges\n    [_]\n    (let [[a b c d e f g h] (get _ :points)]\n      [[a b] [b c] [c d] [d a] ;; bottom\n       [e f] [f g] [g h] [h e] ;; top\n       [a e] [b f]             ;; left\n       [c g] [d h]             ;; right\n       ]))\n\n  g/IFaceAccess\n  (faces\n    [_]\n    (let [[a b c d e f g h] (get _ :points)]\n      [[c d h g]\n       [a b f e]\n       [f g h e]\n       [a d c b]\n       [b c g f]\n       [d a e h]]))\n\n  g/IIntersect\n  (intersect-shape\n    [_ s] (err/unsupported!))\n\n  g/IMeshConvert\n  (as-mesh\n    ([_] (g/as-mesh _ {}))\n    ([_ {:keys [mesh flags attribs] :or {flags \"nsewfb\"}}]\n     (let [[a b c d e f g h] (g/vertices _)\n           [north south east west front back] (d/demunge-flags-seq flags \"nsewfb\")]\n       (->> [(if east (attr/generate-face-attribs [c d h g] 0 attribs nil))\n             (if west (attr/generate-face-attribs [a b f e] 1 attribs nil))\n             (if north (attr/generate-face-attribs [f g h e] 2 attribs nil))\n             (if south (attr/generate-face-attribs [a d c b] 3 attribs nil))\n             (if front (attr/generate-face-attribs [b c g f] 4 attribs nil))\n             (if back (attr/generate-face-attribs [d a e h] 5 attribs nil))]\n            (sequence (filter identity))\n            (g/into (or mesh (bm/basic-mesh)))))))\n\n  ;; - `map-point` still missing\n  ;; - `unmap-point` takes a seq of 8 points defining a cuboid and vector\n  ;;   of normalized UVW coordinates. Applies trilinear interpolation to\n  ;;   compute point within the cuboid:\n  ;;   - U is coord along AD/BC edge\n  ;;   - V along AE/BF\n  ;;   - W along AB/DC\n  ;;\n  ;; Also see: `map-trilinear`\n\n  g/IPointMap\n  (map-point\n    [_ p] (err/unsupported!))\n  (unmap-point\n    [_ p]\n    (gu/map-trilinear (get _ :points) p))\n\n  ;; FIXME either calc barycentric coords for quad or use triangles\n  ;; (already implemented) Do not use, work in progress...\n\n  g/IProximity\n  (closest-point\n    [_ p]\n    (->> (g/faces _)\n         (reduce\n          (fn [acc f]\n            (let [p' (g/closest-point (p/plane-from-points f) p)\n                  d (g/dist-squared p p')]\n              (if (< d (acc 1)) [p' d] acc)))\n          [nil 1e+100])\n         (first)))\n\n  g/ISample\n  (random-point-inside\n    [{p :p size :size}]\n    (let [[x1 y1 z1] p\n          [x2 y2 z2] (m/+ p size)]\n      (vec3 (m/random x1 x2) (m/random y1 y2) (m/random z1 z2))))\n  (random-point\n    [{p :p size :size}]\n    (let [[x1 y1 z1] p\n          [x2 y2 z2] (m/+ p size)\n          id (int (m/random 6))]\n      (cond\n        (< id 2) (vec3 (if (zero? id) x1 x2) (m/random y1 y2) (m/random z1 z2))\n        (< id 4) (vec3 (m/random x1 x2) (if (= 2 id) y1 y2) (m/random z1 z2))\n        :else    (vec3 (m/random x1 x2) (m/random y1 y2) (if (= 4 id) z1 z2)))))\n\n  ;; An Cuboid can be subdivided into smaller ones, i.e. to create a\n  ;; seq of uniform grid cells. The following options can be given as\n  ;; a 2nd argument map:\n  ;;\n  ;; | Key       | Description                                                           | Default |\n  ;; |-----------+-----------------------------------------------------------------------+---------|\n  ;; | `:num`    | number of cols/rows/slices the form will be uniformly subdivided into |       1 |\n  ;; | `:cols`   | number of times the form will be subdivided along the X-axis          |       1 |\n  ;; | `:rows`   | number of times the form will be subdivided along the Y-axis          |       1 |\n  ;; | `:slices` | number of times the form will be subdivided along the Z-axis          |       1 |\n  ;;\n  ;; When `:num` is given, the resulting cuboids will retain the\n  ;; aspect ratio of the original. If specified, `:cols`, `:rows` and\n  ;; `:slices` will take precedence over `:num`, but the latter will\n  ;; be used as default for missing args. Cuboids are returned as a\n  ;; lazyseq starting from the first vertex of the original with inner\n  ;; sorting over XYZ.\n\n  g/ISubdivide\n  (subdivide\n    ([_] (g/subdivide _ {}))\n    ([{points :points} {:keys [num cols rows slices] :or {num 1}}]\n     (let [ru    (partition 2 1 (m/norm-range (or cols num)))\n           rv    (partition 2 1 (m/norm-range (or rows num)))\n           rw    (partition 2 1 (m/norm-range (or slices num)))\n           map-p (fn [p]\n                   (->> (gu/map-trilinear points p)\n                        (mapv #(m/roundto % *eps*))\n                        (vec3)))]\n       (for [[w1 w2] rw, [v1 v2] rv, [u1 u2] ru]\n         (Cuboid.\n          (mapv map-p [[u1 v1 w1] [u1 v1 w2] [u2 v1 w2] [u2 v1 w1]\n                       [u1 v2 w1] [u1 v2 w2] [u2 v2 w2] [u2 v2 w1]]))))))\n\n  g/ITessellate\n  (tessellate\n    ([_] (g/tessellate _ {}))\n    ([_ {f :fn :or {f gu/tessellate-3} :as opts}]\n     (->> (if (some #{:num :cols :rows :slices} (keys opts))\n            (g/subdivide _ opts)\n            [_])\n          (sequence\n           (comp\n            (mapcat g/faces)\n            (mapcat f))))))\n\n  g/IRotate\n  (rotate\n    [_ theta] (g/rotate-z _ theta))\n\n  g/IRotate3D\n  (rotate-x\n    [_ theta] (Cuboid. (mapv #(g/rotate-x % theta) (get _ :points))))\n  (rotate-y\n    [_ theta] (Cuboid. (mapv #(g/rotate-y % theta) (get _ :points))))\n  (rotate-z\n    [_ theta] (Cuboid. (mapv #(g/rotate-z % theta) (get _ :points))))\n  (rotate-around-axis\n    [_ axis theta]\n    (Cuboid.\n     (mapv #(g/rotate-around-axis % axis theta) (get _ :points))))\n\n  g/IScale\n  (scale\n    [_ s] (Cuboid. (mapv #(m/* % s) (get _ :points))))\n  (scale-size\n    [_ s] (Cuboid. (gu/scale-size s (get _ :points))))\n\n  g/ITranslate\n  (translate\n    [_ t] (Cuboid. (mapv #(m/+ % t) (get _ :points))))\n\n  g/ITransform\n  (transform\n    [_ m] (Cuboid. (mapv #(g/transform-vector m %) (get _ :points))))\n\n  ;; https://www.math.ucdavis.edu/~deloera/CURRENT_INTERESTS/small.cubes.ps\n  ;; http://www.ics.uci.edu/~eppstein/projects/tetra/\n\n  g/IVolume\n  (volume\n    [_]\n    (let [[a b c d e f g h] (get _ :points)]\n      (transduce\n       (map #(-> % tetra/tetrahedron g/volume m/abs*))\n       +\n       [[a b d e]\n        [b c d g]\n        [d e g h]\n        [b d e g]\n        [b f g e]]))))\n"]}