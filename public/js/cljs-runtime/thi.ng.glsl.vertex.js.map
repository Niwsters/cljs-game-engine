{"version":3,"sources":["thi/ng/glsl/vertex.cljc"],"mappings":";AAIA,AAAA,yBAAA,2CAAA,oDAAA,0FAAA,qDAAA,vQAAcC;;AAAd,AAAAD,gEAAA,6DAAA,AAAA,2FAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,sFAAA,AAAA,uDAAA,AAAA,0BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,EAAA,AAAA,EAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAC,wBAAA,AAAA,AAAAA,sCAAA,SAAAC,kEAAA,2CAAA,kEAAA,OAAA,+DAAA,MAAA,8DAAA,mFAAA,WAAA,aAAA,YAAA;AAMA,AAAA,oCAAA,2CAAA,oDAAA,qGAAA,qDAAA,7RAAcC;;AAAd,AAAAH,gEAAA,wEAAA,AAAA,iHAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,sFAAA,AAAA,6EAAA,AAAA,0BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAG,mCAAA,AAAA,AAAAA,iDAAA,SAAAD,kEAAA,2CAAA,kEAAA,OAAA,+DAAA,gBAAA,8DAAA,mFAAA,cAAA;AAMA,AAAA,8BAAA,2CAAA,oDAAA,oHAAA,qDAAA,tSAAcE;;AAAd,AAAAJ,gEAAA,kEAAA,AAAA,mGAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,sFAAA,AAAA,kEAAA,AAAA,0BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAI,6BAAA,AAAA,AAAAA,2CAAA,SAAAF,kEAAA,2CAAA,kEAAA,OAAA,+DAAA,UAAA,8DAAA,mFAAA,SAAA;AAQA,AAAA,8BAAA,2CAAA,oDAAA,oHAAA,qDAAA,tSAAcG;;AAAd,AAAAL,gEAAA,kEAAA,AAAA,oGAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,sFAAA,AAAA,iEAAA,AAAA,0BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAK,6BAAA,AAAA,AAAAA,2CAAA,SAAAH,kEAAA,2CAAA,kEAAA,OAAA,+DAAA,UAAA,8DAAA,mFAAA,SAAA;AAQA,AAAA,8BAAA,2CAAA,oDAAA,oHAAA,qDAAA,tSAAcI;;AAAd,AAAAN,gEAAA,kEAAA,AAAA,qGAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,sFAAA,AAAA,6DAAA,AAAA,0BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAM,6BAAA,AAAA,AAAAA,2CAAA,SAAAJ,kEAAA,2CAAA,kEAAA,OAAA,+DAAA,UAAA,8DAAA,mFAAA,SAAA","names":["cljs.core.alter_meta_BANG_","thi.ng.glsl.vertex/mvp","cljs.core/merge","thi.ng.glsl.vertex/surface-normal","thi.ng.glsl.vertex/rotate-x","thi.ng.glsl.vertex/rotate-y","thi.ng.glsl.vertex/rotate-z"],"sourcesContent":["(ns thi.ng.glsl.vertex\n  (:require\n   [thi.ng.glsl.core :as glsl :include-macros true]))\n\n(glsl/defglsl mvp\n  nil \"\nvec4 mvp(vec3 pos, mat4 model, mat4 view, mat4 proj) {\n  return proj * view * model * vec4(pos, 1.0);\n}\")\n\n(glsl/defglsl surface-normal\n  nil \"\nvec3 surfaceNormal(vec3 normal, mat4 normalMat) {\n  return normalize((normalMat * vec4(normal, 0.0)).xyz);\n}\")\n\n(glsl/defglsl rotate-x\n  nil \"\nvec3 rotateX(vec3 p, float theta) {\n  float s = sin(theta);\n  float c = cos(theta);\n  return vec3(p.x, p.y * c - p.z * s, p.z * c + p.y * s);\n}\")\n\n(glsl/defglsl rotate-y\n  nil \"\nvec3 rotateY(vec3 p, float theta) {\n  float s = sin(theta);\n  float c = cos(theta);\n  return vec3(p.x * c + p.z * s, p.y, p.z * c - p.x * s);\n}\")\n\n(glsl/defglsl rotate-z\n  nil \"\nvec3 rotateZ(vec3 p, float theta) {\n  float s = sin(theta);\n  float c = cos(theta);\n  return vec3(p.x * c - p.y * s, p.y * c + p.x * s, p.z);\n}\")\n"]}