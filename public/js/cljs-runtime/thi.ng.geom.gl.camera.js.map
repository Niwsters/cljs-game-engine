{"version":3,"sources":["thi/ng/geom/gl/camera.cljc"],"mappings":";AAmBA;;;;8BAAA,9BAAMA,oEAGHC,KAAKC;AAHR,AAIE,2DAAA,6EAAA,2CAAA,2JAAA,vUAACC,+CAAOF,kEAAeG,gHAAa,gDAAA,hDAACC,4CAAIH,+GAAiB,gDAAA,hDAACG,4CAAIH;;AAEjE;;;;;oCAAA,pCAAMI,gFAIHC,EAAEC,GAAGC;AAJR,AAKE,OAACC,oBACA,WAAKC,IAAIC,EAAEC;AAAX,AAAc,OAACC,8CAAMH,IAAIC,EAAE,EAAI,AAACG,oBAAIF,IAAG,iBAAAG,WAAG,CAACT,kCAAAA,qCAAAA,LAAEK,iBAAAA;AAAN,AAAA,0EAAAI,wBAAAA,1FAACH,kCAAAA,4CAAAA;KAASA;GACjDN,EAAE,AAACU,sBAAYR,KAAKD;;AAEvB,iCAAA,jCAAMU,0EACHhB,IAAIO;AADP,AAEE,IAAMP,UAAI,sCAAA,mFAAA,oDAAA,wDAAA,rOAACI,kCAAYJ,4PAAuBO;AAA9C,AACE,6DAAA,tDAACK,8CAAMZ,6DAAU,AAACiB,2BAAY,oDAAA,pDAACd,4CAAIH,6DAAU,oDAAA,pDAACG,4CAAIH,iEAAa,oDAAA,pDAACG,4CAAIH;;AAExE,uCAAA,vCAAMkB,sFACHlB,IAAIO;AADP,AAEE,IAAMP,UAAI,sCAAA,mFAAA,kDAAA,yDAAA,sDAAA,1RAACI,kCAAYJ,iTAA+BO;AAAtD,AACE,6DAAA,tDAACK,8CAAMZ,6DAAU,AAACmB,+BAAgB,oDAAA,pDAAChB,4CAAIH,2DAAU,oDAAA,pDAACG,4CAAIH,kEAAa,oDAAA,pDAACG,4CAAIH,+DAAW,oDAAA,pDAACG,4CAAIH;;AAE5F,2CAAA,3CAAMoB,8FACHb;AADH,2EAEM,uGAAA,2CAAA,uHAAA,8EAAA,wEAAA,kDAAA,KAAA,sDAAA,IAAA,iDAAA,MAAA,vkBAACc,sMACS,sDAAA,IAAA,IAAA,9DAACC,2HACDC,uEACAC,wPAIA,CAAA,OAAA,aACTjB,prBACD,AAACS,+rBAAST,3uBACV,OAACW,0uBAAeX","names":["thi.ng.geom.gl.camera/apply","spec","cam","cljs.core.update","cljs.core/merge","cljs.core.get","thi.ng.geom.gl.camera/update-keys","m","ks","opts","cljs.core/reduce-kv","acc","k","v","cljs.core.assoc","cljs.core/fn?","G__17661","cljs.core/select-keys","thi.ng.geom.gl.camera/set-view","thi.ng.geom.matrix/look-at","thi.ng.geom.gl.camera/set-projection","thi.ng.geom.matrix/perspective","thi.ng.geom.gl.camera/perspective-camera","cljs.core.merge","thi.ng.geom.vector.vec3","thi.ng.geom.vector/V3","thi.ng.geom.vector/V3Y"],"sourcesContent":["(ns thi.ng.geom.gl.camera\n  (:refer-clojure :exclude [apply])\n  (:require\n   [thi.ng.math.core :as m]\n   [thi.ng.geom.vector :as v :refer [vec3]]\n   [thi.ng.geom.matrix :as mat]))\n\n;; Perspective camera\n;;\n;; | *Key*     | *Type*        |      *Default* | *Description*                           |\n;; |-----------+---------------+----------------+-----------------------------------------|\n;; | `:eye`    | vec3          |          `nil` | Camera position                         |\n;; | `:target` | vec3          |     `(vec3 0)` | Camera target (center of view)          |\n;; | `:up`     | vec3          | `(vec3 0 1 0)` | Camera up axis                          |\n;; | `:fov`    | float         |             45 | Vertical FOV in degrees                 |\n;; | `:aspect` | float or rect |           16:9 | Camera aspect ratio (or view rectangle) |\n;; | `:near`   | float         |            0.1 | Camera near clipping distance           |\n;; | `:far`    | float         |            100 | Camera far clipping distance            |\n\n(defn apply\n  \"Takes a GL model spec map & camera, injects :view & :proj\n  uniforms into spec.\"\n  [spec cam]\n  (update spec :uniforms merge {:view (get cam :view) :proj (get cam :proj)}))\n\n(defn update-keys\n  \"Takes a map m, key seq and map of new vals, replaces keys in m with\n  new vals. If a value in opts map is a function, applies fn to value\n  of key in original map.\"\n  [m ks opts]\n  (reduce-kv\n   (fn [acc k v] (assoc acc k (if (fn? v) (v (m k)) v)))\n   m (select-keys opts ks)))\n\n(defn set-view\n  [cam opts]\n  (let [cam (update-keys cam [:eye :target :up] opts)]\n    (assoc cam :view (mat/look-at (get cam :eye) (get cam :target) (get cam :up)))))\n\n(defn set-projection\n  [cam opts]\n  (let [cam (update-keys cam  [:fov :aspect :near :far] opts)]\n    (assoc cam :proj (mat/perspective (get cam :fov) (get cam :aspect) (get cam :near) (get cam :far)))))\n\n(defn perspective-camera\n  [opts]\n  (-> (merge\n       {:eye    (vec3 0.0 0.0 2.0)\n        :target v/V3\n        :up     v/V3Y\n        :fov    45\n        :near   0.1\n        :far    100\n        :aspect (/ 16.0 9.0)}\n       opts)\n      (set-view opts)\n      (set-projection opts)))\n"]}